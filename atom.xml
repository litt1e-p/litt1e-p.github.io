<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[litt1e-p]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://litt1e-p.github.io/"/>
  <updated>2016-07-07T12:18:45.000Z</updated>
  <id>https://litt1e-p.github.io/</id>
  
  <author>
    <name><![CDATA[litt1e-p]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Definition of Deprecated & Unavailable]]></title>
    <link href="https://litt1e-p.github.io/2016/07/07/Definition-of-Deprecated-Unavailable/"/>
    <id>https://litt1e-p.github.io/2016/07/07/Definition-of-Deprecated-Unavailable/</id>
    <published>2016-07-07T12:14:06.000Z</published>
    <updated>2016-07-07T12:18:45.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>1.0 <code>mark for unavailable function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__attribute__((unavailable(<span class="string">"It is not available, Use other function instead"</span>)));</span><br></pre></td></tr></table></figure>
<h3 id="Notice">Notice</h3><p><code>__attribute__((unavailable(...) can not pass Xcode buid</code></p>
<hr>
<ul>
<li>2.0 <code>mark for deprecated function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">NS_DEPRECATED_IOS</span>(<span class="number">2_0</span>, <span class="number">6_0</span>, <span class="string">"Use other function instead"</span>)</span><br><span class="line"><span class="comment">//2_0 &amp; 6_0 means that the function can only run on iOS2~6.0</span></span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>if you want get more infomation for deprecated definitions, check Apple’s official documents</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define <span class="type">NS_DEPRECATED</span>(_macIntro, _macDep, _iosIntro, _iosDep, ...) <span class="type">CF_DEPRECATED</span>(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)</span><br><span class="line">#define <span class="type">NS_DEPRECATED_MAC</span>(_macIntro, _macDep, ...) <span class="type">CF_DEPRECATED_MAC</span>(_macIntro, _macDep, __VA_ARGS__)</span><br><span class="line">#define <span class="type">NS_DEPRECATED_IOS</span>(_iosIntro, _iosDep, ...) <span class="type">CF_DEPRECATED_IOS</span>(_iosIntro, _iosDep, __VA_ARGS__)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>1.0 <code>mark for unavailable function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span ]]>
    </summary>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIRefreshControl Trigger]]></title>
    <link href="https://litt1e-p.github.io/2016/07/04/UIRefreshControl-Trigger/"/>
    <id>https://litt1e-p.github.io/2016/07/04/UIRefreshControl-Trigger/</id>
    <published>2016-07-04T13:22:46.000Z</published>
    <updated>2016-07-07T12:19:14.000Z</updated>
    <content type="html"><![CDATA[<p>Sometimes we want to trigger the UIRefreshControl auto beginRefreshing with scrollView or its subView pulling down effects.</p>
<p>here it is a extension for it</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIRefreshControl</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">triggerRefresh</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scrollView = superview <span class="keyword">as</span>? <span class="type">UIScrollView</span> &#123;</span><br><span class="line">            scrollView.setContentOffset(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: scrollView.contentOffset.y - frame.height), animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        beginRefreshing()</span><br><span class="line">        <span class="keyword">self</span>.sendActionsForControlEvents(<span class="type">UIControlEvents</span>.<span class="type">ValueChanged</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Usage">Usage</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tableView.triggerRefresh()</span><br><span class="line"></span><br><span class="line">collectionView.triggerRefresh()</span><br><span class="line"></span><br><span class="line">scrollView.triggerRefresh()</span><br></pre></td></tr></table></figure>
<h3 id="done_🎉🎉">done 🎉🎉</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>Sometimes we want to trigger the UIRefreshControl auto beginRefreshing with scrollView or its subView pulling down effects.</p>
<p>here i]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Selector in Swift]]></title>
    <link href="https://litt1e-p.github.io/2016/06/24/Selector-in-Swift/"/>
    <id>https://litt1e-p.github.io/2016/06/24/Selector-in-Swift/</id>
    <published>2016-06-24T15:47:13.000Z</published>
    <updated>2016-06-24T15:52:46.000Z</updated>
    <content type="html"><![CDATA[<p>#selector in Swift.md</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// func</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">optional</span> <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGSize</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// selector</span></span><br><span class="line"></span><br><span class="line">#selector(<span class="type">UICollectionViewDelegateFlowLayout</span>.collectionView(<span class="number">_</span>:layout:sizeForItemAtIndexPath:))</span><br><span class="line"></span><br><span class="line"><span class="comment">// in a word</span></span><br><span class="line"></span><br><span class="line">#selector((className or protocolName).<span class="type">MethodName</span>(<span class="type">ParamA</span>:<span class="type">ParamB</span>:...))</span><br></pre></td></tr></table></figure>
<h4 id="Notice">Notice</h4><p>if func does not have params</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#selector((className or protocolName).<span class="type">MethodName</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>#selector in Swift.md</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Set a float value for Xib constraint]]></title>
    <link href="https://litt1e-p.github.io/2016/06/22/Set-a-float-value-for-Xib-constraint/"/>
    <id>https://litt1e-p.github.io/2016/06/22/Set-a-float-value-for-Xib-constraint/</id>
    <published>2016-06-22T12:05:43.000Z</published>
    <updated>2016-06-22T12:34:11.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p> as we all knows, it is impossible that setting a float value for autoLayout constraint in Xib interfaceBuilder, such as set 0.5 for a UIView’s height</p>
</blockquote>
<h3 id="There_are_2_solutions_to_break_it_out">There are 2 solutions to break it out</h3><ul>
<li>Method 01: <code>get its constraint IBOutlet and modify with animation</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">separateLineCst.constant = <span class="number">0.5</span></span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.02</span>) &#123; </span><br><span class="line">     <span class="keyword">self</span>.layoutIfNeeded()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>Method 02: <code>trick way!</code></li>
</ul>
<p>1.open your xib as souceCode</p>
<p><img src="http://ww4.sinaimg.cn/large/005wcR5Jgw1f545z4256aj31kw0hh0wo.jpg" alt=""></p>
<p><img src="http://ww2.sinaimg.cn/large/005wcR5Jgw1f545zfgpn5j31a20gsjx7.jpg" alt=""></p>
<p>2.find your target view’s constraint and modify it</p>
<p><img src="http://ww3.sinaimg.cn/large/005wcR5Jgw1f545zu8qmkj31by0pmh6u.jpg" alt=""></p>
<p>3.save and reopen it as interface builder document</p>
<p><img src="http://ww3.sinaimg.cn/large/005wcR5Jgw1f54602mvmxj311g09q441.jpg" alt=""></p>
<p>4.see what happen! 🎉🎉</p>
<p><img src="http://ww4.sinaimg.cn/large/005wcR5Jgw1f545vwfo4aj31ho0f8whq.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p> as we all knows, it is impossible that setting a float value for autoLayout constraint in Xib interfaceBuilder, such as set]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[typealias closure in Swift]]></title>
    <link href="https://litt1e-p.github.io/2016/06/21/typealias-closure-in-Swift/"/>
    <id>https://litt1e-p.github.io/2016/06/21/typealias-closure-in-Swift/</id>
    <published>2016-06-21T12:44:59.000Z</published>
    <updated>2016-06-21T13:04:26.000Z</updated>
    <content type="html"><![CDATA[<p>typealias closure in Swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IsLimited</span> = ((isLimit: <span class="type">Bool</span>, data: <span class="type">AnyObject</span>)-&gt;<span class="type">Void</span>)?</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IsLimited</span> = (() -&gt; <span class="type">Void</span>)?</span><br></pre></td></tr></table></figure>
<p>typealias closure in OC</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#10;typedef void(^IsLimited)(BOOL isLimit, id data);&#10;&#10;typedef void(^IsLimited)();</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>typealias closure in Swift</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span cl]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Build a custom xib class in Swift]]></title>
    <link href="https://litt1e-p.github.io/2016/06/16/Build-a-custom-xib-class-in-Swift/"/>
    <id>https://litt1e-p.github.io/2016/06/16/Build-a-custom-xib-class-in-Swift/</id>
    <published>2016-06-16T14:43:41.000Z</published>
    <updated>2016-06-16T14:50:24.000Z</updated>
    <content type="html"><![CDATA[<h3 id="First_check,_if_you_have_your_class_name_declared_in_the_view_itself,_not_in_the_file_owner-">First check, if you have your class name declared in the view itself, not in the file owner.</h3><p><img src="http://i.stack.imgur.com/j70PR.png" alt=""></p>
<h3 id="If_not,_do_it-_Then_try_it_again-">If not, do it. Then try it again.</h3><h3 id="Another_option_is_to_create_IBOutlet_in_your_AddProgramView-swift">Another option is to create IBOutlet in your AddProgramView.swift</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> contentView: <span class="type">UIView</span>!</span><br></pre></td></tr></table></figure>
<h3 id="and_remove_the_class_name_from_the_view_and_add_it_to_File’s_Owner-">and remove the class name from the view and add it to File’s Owner.</h3><p><img src="http://i.stack.imgur.com/aiYxL.png" alt=""></p>
<h3 id="Connect_contentView_by_right-clicking_at_the_File’s_owner:">Connect contentView by right-clicking at the File’s owner:</h3><p><img src="http://i.stack.imgur.com/YlfZ9.png" alt=""></p>
<h3 id="Then_create_init_methods_like_this:">Then create init methods like this:</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddProgramView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="preprocessor">@IBOutlet</span> <span class="keyword">var</span> contentView: <span class="type">UIView</span>!</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">init</span>(frame: <span class="type">CGRect</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        commonInit()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</span><br><span class="line">        commonInit()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">commonInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">NSBundle</span>.mainBundle().loadNibNamed(<span class="string">"AddProgramView"</span>, owner: <span class="keyword">self</span>, options: <span class="literal">nil</span>)</span><br><span class="line">        <span class="keyword">self</span>.addSubview(<span class="keyword">self</span>.contentView)</span><br><span class="line">        <span class="keyword">self</span>.contentView.frame = <span class="keyword">self</span>.bounds</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="And_now_you_can_use_the_AddProgramView_wherever_you_want-_Either_by_init(frame:)">And now you can use the AddProgramView wherever you want. Either by init(frame:)</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> addProgramView = <span class="type">AddProgramView</span>.<span class="keyword">init</span>(frame: <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">320</span>, <span class="number">30</span>))</span><br></pre></td></tr></table></figure>
<h3 id="done">done</h3>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="First_check,_if_you_have_your_class_name_declared_in_the_view_itself,_not_in_the_file_owner-">First check, if you have your class na]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[log json with pretty & unescape character string]]></title>
    <link href="https://litt1e-p.github.io/2016/06/09/log-json-with-pretty-unescape-character-string/"/>
    <id>https://litt1e-p.github.io/2016/06/09/log-json-with-pretty-unescape-character-string/</id>
    <published>2016-06-09T00:19:35.000Z</published>
    <updated>2016-06-14T14:46:49.000Z</updated>
    <content type="html"><![CDATA[<p>In swift 2.+, printing json object in Xcode debug console window will show the escape special character string, and it is difficult to read.<br>so this is a func for printing pretty &amp; unescape character string</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">LogJson</span><span class="params">(data: NSData, <span class="number">_</span> file: String = #file , <span class="number">_</span> function: String = #function, <span class="number">_</span> line: Int = #line)</span></span> &#123;</span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> dataAsJSON = <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.<span class="type">JSONObjectWithData</span>(data, options: [])</span><br><span class="line">            <span class="keyword">let</span> prettyData =  <span class="keyword">try</span> <span class="type">NSJSONSerialization</span>.dataWithJSONObject(dataAsJSON, options: .<span class="type">PrettyPrinted</span>)</span><br><span class="line">            <span class="keyword">let</span> ss = <span class="type">NSString</span>(data: prettyData, encoding: <span class="type">NSUTF8StringEncoding</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> name = (file <span class="keyword">as</span> <span class="type">NSString</span>).lastPathComponent</span><br><span class="line">            <span class="keyword">let</span> fileArray = name.componentsSeparatedByString(<span class="string">"."</span>)</span><br><span class="line">            <span class="keyword">let</span> fileName = fileArray[<span class="number">0</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="type">Logger</span>.log(.<span class="type">Debug</span>, fileName + <span class="string">"-<span class="subst">\(line)</span>-"</span> + function, ss)</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="type">Log</span>(error)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    #endif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Notice">Notice</h3><p>there is a dependency lib named <a href="https://github.com/litt1e-p/Logger" target="_blank" rel="external">Logger</a>, which will be release in my <a href="https://github.com/litt1e-p" target="_blank" rel="external">github</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>In swift 2.+, printing json object in Xcode debug console window will show the escape special character string, and it is difficult to re]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[swift debug flag]]></title>
    <link href="https://litt1e-p.github.io/2016/06/03/swift-debug-flag/"/>
    <id>https://litt1e-p.github.io/2016/06/03/swift-debug-flag/</id>
    <published>2016-06-03T13:48:23.000Z</published>
    <updated>2016-06-03T13:50:50.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">PROJECT</span> -&gt; <span class="type">Build</span> <span class="type">Settings</span> -&gt; <span class="type">Swift</span> <span class="type">Compiler</span> - <span class="type">Custom</span> <span class="type">Flags</span> -&gt; <span class="type">Other</span> <span class="type">Swift</span> <span class="type">Flags</span> -&gt; <span class="type">Debug</span> </span><br><span class="line"></span><br><span class="line">click +</span><br><span class="line"></span><br><span class="line">add  -<span class="type">D</span> <span class="type">DEBUG</span></span><br></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/005wcR5Jgw1f4hujelcspj31k01467de.jpg" alt=""></p>
<h3 id="usage">usage</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kApiDomain = <span class="string">"http://192.168.2.8"</span></span><br><span class="line"></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kApiDomain = <span class="string">"http://192.168.2.9"</span></span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[a simple macro in swift]]></title>
    <link href="https://litt1e-p.github.io/2016/05/13/a-simple-macro-in-swift/"/>
    <id>https://litt1e-p.github.io/2016/05/13/a-simple-macro-in-swift/</id>
    <published>2016-05-13T15:31:43.000Z</published>
    <updated>2016-05-13T15:35:42.000Z</updated>
    <content type="html"><![CDATA[<p>a simple macro func example for check whether a string is empty </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">IsEmptyStr</span>: (<span class="type">String</span>?) -&gt; <span class="type">Bool</span> = &#123;</span><br><span class="line">    (ref: <span class="type">String</span>?) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> ref == <span class="literal">nil</span> || ref!.isEqual(<span class="type">NSNull</span>()) || ref == <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="type">IsEmptyStr</span>(<span class="string">""</span>) &#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">"empty"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>a simple macro func example for check whether a string is empty </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[adjust text font for rect]]></title>
    <link href="https://litt1e-p.github.io/2016/05/10/adjust-text-font-for-rect/"/>
    <id>https://litt1e-p.github.io/2016/05/10/adjust-text-font-for-rect/</id>
    <published>2016-05-10T12:54:32.000Z</published>
    <updated>2016-05-10T12:57:19.000Z</updated>
    <content type="html"><![CDATA[<p>for Objective-C<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (void)adjustsFontSizeToFitRect:(<span class="type">CGRect</span>)rect</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">CGSize</span> maxSize          = <span class="type">CGSizeMake</span>(rect.size.width, rect.size.height);</span><br><span class="line">    <span class="type">CGFloat</span> currentFontSize = <span class="number">17</span>.f;</span><br><span class="line">    <span class="type">NSString</span> *str           = <span class="keyword">self</span>.text;</span><br><span class="line">    <span class="type">CGSize</span> requiredSize     = [str boundingRectWithSize:maxSize options:<span class="type">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="keyword">self</span>.font fontWithSize:currentFontSize]&#125; context:<span class="literal">nil</span>].size;</span><br><span class="line">    <span class="keyword">if</span>(requiredSize.height &lt;= maxSize.height) &#123;</span><br><span class="line">        <span class="keyword">while</span> (requiredSize.height &lt;= maxSize.height &amp;&amp; requiredSize.width &lt; maxSize.width) &#123;</span><br><span class="line">            currentFontSize++;</span><br><span class="line">            requiredSize = [str boundingRectWithSize:maxSize options:<span class="type">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="keyword">self</span>.font fontWithSize:currentFontSize]&#125; context:<span class="literal">nil</span>].size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (requiredSize.height &gt; maxSize.height || requiredSize.width &gt; maxSize.width) &#123;</span><br><span class="line">            currentFontSize--;</span><br><span class="line">            requiredSize = [str boundingRectWithSize:maxSize options:<span class="type">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="keyword">self</span>.font fontWithSize:currentFontSize]&#125; context:<span class="literal">nil</span>].size;</span><br><span class="line">        &#125;</span><br><span class="line">        requiredSize=[str boundingRectWithSize:maxSize options:<span class="type">NSStringDrawingUsesFontLeading</span> attributes:@&#123;<span class="type">NSFontAttributeName</span>:[<span class="keyword">self</span>.font fontWithSize:currentFontSize]&#125; context:<span class="literal">nil</span>].size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.font = [<span class="keyword">self</span>.font fontWithSize:currentFontSize];</span><br><span class="line">    <span class="keyword">self</span>.adjustsFontSizeToFitWidth = <span class="type">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>for Objective-C<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Escape & unescape html character code symbol]]></title>
    <link href="https://litt1e-p.github.io/2016/04/24/escape_html/"/>
    <id>https://litt1e-p.github.io/2016/04/24/escape_html/</id>
    <published>2016-04-24T03:24:10.000Z</published>
    <updated>2016-07-06T13:51:58.000Z</updated>
    <content type="html"><![CDATA[<p>here is an extension for swift 2+<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">String</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">unEscapeHtml</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">         <span class="keyword">return</span>  <span class="keyword">self</span>.stringByReplacingOccurrencesOfString(<span class="string">"&amp;lt;"</span>, withString: <span class="string">"&lt;"</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"&amp;gt;"</span>, withString: <span class="string">"&gt;"</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"&amp;quot;"</span>, withString: <span class="string">"'"</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"\t"</span>, withString: <span class="string">""</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"\r"</span>, withString: <span class="string">""</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"\n"</span>, withString: <span class="string">""</span>)</span><br><span class="line">         .stringByReplacingOccurrencesOfString(<span class="string">"&amp;apos;"</span>, withString: <span class="string">"'"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">escapeHtml</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.stringByReplacingOccurrencesOfString(<span class="string">"&amp;"</span>, withString: <span class="string">"&amp;amp;"</span>)</span><br><span class="line">        .stringByReplacingOccurrencesOfString(<span class="string">"\""</span>, withString: <span class="string">"&amp;quot;"</span>)</span><br><span class="line">        .stringByReplacingOccurrencesOfString(<span class="string">"'"</span>, withString: <span class="string">"&amp;#39;"</span>)</span><br><span class="line">        .stringByReplacingOccurrencesOfString(<span class="string">"&lt;"</span>, withString: <span class="string">"&amp;lt;"</span>)</span><br><span class="line">        .stringByReplacingOccurrencesOfString(<span class="string">"&gt;"</span>, withString: <span class="string">"&amp;gt;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>there are also several Apple’s Foundation functions for escaping and unescaping the encoding characters</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">extension</span> <span class="title">String</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="type">URLEscapedString</span>: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.stringByAddingPercentEncodingWithAllowedCharacters(<span class="type">NSCharacterSet</span>.<span class="type">URLHostAllowedCharacterSet</span>())!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> <span class="type">URLUnEscapedString</span>: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.stringByRemovingPercentEncoding!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>done exactly.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>here is an extension for swift 2+<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><s]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[regex]]></title>
    <link href="https://litt1e-p.github.io/2016/04/23/regex/"/>
    <id>https://litt1e-p.github.io/2016/04/23/regex/</id>
    <published>2016-04-23T05:48:14.000Z</published>
    <updated>2016-04-23T05:48:23.000Z</updated>
    <content type="html"><![CDATA[<h4 id="for_match_‘\r’_‘\n’_or_‘\r\n’">for match ‘\r’ ‘\n’ or ‘\r\n’</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[\s\<span class="type">S</span>]*</span><br><span class="line">[\d\<span class="type">D</span>]*</span><br><span class="line">[\w\<span class="type">W</span>]*</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="for_match_‘\r’_‘\n’_or_‘\r\n’">for match ‘\r’ ‘\n’ or ‘\r\n’</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[commit to cocoapods]]></title>
    <link href="https://litt1e-p.github.io/2016/01/05/commit-to-cocoapods/"/>
    <id>https://litt1e-p.github.io/2016/01/05/commit-to-cocoapods/</id>
    <published>2016-01-05T02:52:09.000Z</published>
    <updated>2016-01-05T03:32:00.000Z</updated>
    <content type="html"><![CDATA[<p>you must register a cocoapods account before push your pod lib 。<br>prepare your：</p>
<blockquote>
<ul>
<li>email : abc@abc.com</li>
<li>username: abc</li>
<li>description: I am description</li>
</ul>
</blockquote>
<p><code>use your real custom info</code></p>
<a id="more"></a>
<hr>
<p>now register it</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register abc@abc.com 'abc' --description='<span class="type">I</span> am description'</span><br></pre></td></tr></table></figure>
<p>check your email and activate account then use pod trunk me<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure></p>
<p>if register successfully it will show:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- <span class="type">Name</span>:    abc</span><br><span class="line">  - <span class="type">Email</span>:   abc@abc.com</span><br><span class="line">  - <span class="type">Since</span>:    <span class="type">November</span> 6th, <span class="number">2015</span> <span class="number">04</span>:<span class="number">33</span></span><br><span class="line">  - <span class="type">Pods</span>:</span><br><span class="line">  - <span class="type">Sessions</span>:</span><br><span class="line">    - <span class="type">November</span> 6th, <span class="number">2015</span> <span class="number">04</span>:<span class="number">33</span> - <span class="type">May</span> 11th, <span class="number">03</span>:<span class="number">48</span>. <span class="type">IP</span>:  xxx.xxx.xx.xx</span><br><span class="line">    <span class="type">Description</span>:  <span class="type">I</span> am description</span><br></pre></td></tr></table></figure></p>
<hr>
<p>then tag and push tag</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin master <span class="comment">//commit git </span></span><br><span class="line">git tag '<span class="number">1.0</span>.<span class="number">0</span>' <span class="comment">//replace it with your version</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure>
<p>if you use it via<a href="https:www.github.com" target="_blank" rel="external">github</a><br>you can:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create https:<span class="comment">//github.com/abc/podTest</span></span><br></pre></td></tr></table></figure></p>
<p><code>replace it with your real pod library</code></p>
<p>or use:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi podTest.podspec</span><br></pre></td></tr></table></figure></p>
<p>and modify the podspec configuration<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Pod</span>::<span class="type">Spec</span>.new <span class="keyword">do</span> |s|</span><br><span class="line">  s.name             = <span class="string">"podTest"</span>  #pod library</span><br><span class="line">  s.version          = <span class="string">"1.0.0"</span>  #version</span><br><span class="line">  s.summary          = <span class="string">"I am summary"</span> # write a short summary</span><br><span class="line">  s.description      = &lt;&lt;-<span class="type">DESC</span></span><br><span class="line">                       <span class="type">I</span> am description</span><br><span class="line">                       <span class="type">DESC</span> # write description of your pod library</span><br><span class="line">  s.homepage         = <span class="string">"https://github.com/abc/podTest"</span>  #repository home page, must be available</span><br><span class="line">  # s.screenshots     = <span class="string">"www.example.com/screenshots_1"</span>, <span class="string">"www.example.com/screenshots_2"</span> #screenshot</span><br><span class="line">  s.license          = '<span class="type">MIT'</span> #opensource <span class="class"><span class="keyword">protocol</span></span><br><span class="line">  <span class="title">s</span>.<span class="title">author</span>           = </span>&#123; <span class="string">"abc"</span> =&gt; <span class="string">"abc@abc.com"</span> &#125; #author</span><br><span class="line">  s.source           = &#123; :git =&gt; <span class="string">"https://github.com/abc/podTest.git"</span>, :tag =&gt; <span class="string">"1.0.0"</span> &#125;  #repository url which http &amp; https valid only</span><br><span class="line">  # s.social_media_url = 'https:<span class="comment">//twitter.com/&lt;TWITTER_USERNAME&gt;'  #social media url</span></span><br><span class="line"></span><br><span class="line">  s.platform     = :ios, '<span class="number">7.0</span>'  #available platform and version </span><br><span class="line">  s.requires_arc = <span class="literal">true</span> #</span><br><span class="line">  s.source_files = '<span class="type">Pod</span>/<span class="type">Classes</span><span class="comment">/**/</span>*'    #source code location，**<span class="comment">/*if your lib has separate folder, use ',' to separate</span><br><span class="line">  s.resource_bundles = &#123;</span><br><span class="line">    'PodTestLibrary' =&gt; ['Pod/Assets<span class="comment">/*.png']</span><br><span class="line">  &#125; #bundle location</span><br><span class="line">  s.public_header_files = 'Pod/Classes<span class="comment">/**/</span>*.h'  #public header files</span><br><span class="line">  s.frameworks = 'UIKit' # framework, use ',' to separate them </span><br><span class="line">  s.dependency 'AFNetworking', '~&gt; 2.3' #dependent thirdparty lib，you should write those s.dependency if has more than one lib</span><br><span class="line">end</span></span></span><br></pre></td></tr></table></figure></p>
<p><code>the summary and description should be different or it will show warning message</code></p>
<hr>
<p>then commit your podspec</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add podTest.podspec</span><br><span class="line">git commit -m "add podTest.podspec file”</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<hr>
<p>and lint your podspec is valid<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint --verbose <span class="comment">//--verbose can show process message during lint</span></span><br></pre></td></tr></table></figure></p>
<p>modify your podspec if it didn’t pass the lint</p>
<p>if pass it will show:<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podTest.podspec passed validation.</span><br></pre></td></tr></table></figure></p>
<p>trunk push your podspec at last<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push podTest.podspec</span><br></pre></td></tr></table></figure></p>
<p>it will show below when push successfully<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="type">Log</span> messages:</span><br><span class="line">- <span class="type">January</span> 4th, <span class="number">02</span>:<span class="number">29</span>: <span class="type">Push</span> <span class="keyword">for</span> `podTest <span class="number">1.0</span>.<span class="number">0</span>' initiated.</span><br><span class="line">- <span class="type">January</span> 4th, <span class="number">02</span>:<span class="number">29</span>: <span class="type">Push</span> <span class="keyword">for</span> `podTest <span class="number">1.0</span>.<span class="number">0</span>' has been pushed (<span class="number">2.447244041</span> s).</span><br></pre></td></tr></table></figure></p>
<p>now enjoy your own cocoapod pod!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>you must register a cocoapods account before push your pod lib 。<br>prepare your：</p>
<blockquote>
<ul>
<li>email : abc@abc.com</li>
<li>username: abc</li>
<li>description: I am description</li>
</ul>
</blockquote>
<p><code>use your real custom info</code></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[time to go]]></title>
    <link href="https://litt1e-p.github.io/2015/11/18/time-to-go/"/>
    <id>https://litt1e-p.github.io/2015/11/18/time-to-go/</id>
    <published>2015-11-17T16:05:56.000Z</published>
    <updated>2015-11-17T16:10:35.000Z</updated>
    <content type="html"><![CDATA[<h1 id="it’s_a_new_world,_time_to_go">it’s a new world, time to go</h1><a id="more"></a>
<p>wait a minute</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="it’s_a_new_world,_time_to_go">it’s a new world, time to go</h1>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://litt1e-p.github.io/2015/11/15/hello-world/"/>
    <id>https://litt1e-p.github.io/2015/11/15/hello-world/</id>
    <published>2015-11-15T01:54:42.000Z</published>
    <updated>2015-11-15T01:54:42.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
