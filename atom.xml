<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[litt1e-p]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="https://litt1e-p.github.io/"/>
  <updated>2018-03-06T12:35:02.224Z</updated>
  <id>https://litt1e-p.github.io/</id>
  
  <author>
    <name><![CDATA[litt1e-p]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Runtime]]></title>
    <link href="https://litt1e-p.github.io/2017/03/06/Runtime/"/>
    <id>https://litt1e-p.github.io/2017/03/06/Runtime/</id>
    <published>2017-03-06T12:32:31.000Z</published>
    <updated>2018-03-06T12:35:02.224Z</updated>
    <content type="html"><![CDATA[<h4 id="简介">简介</h4><p>Objective-C 是一门动态语言，它的动态性体现在它将很多编译和链接时做的事推延到运行时处理，而这一机制主要依赖系统提供的 runtime 库。利用 runtime 库，我们能在运行时做很多事，例如 objc_setAssociatedObject 动态绑定属性、method swizzling、class_copyIvarList 动态获取属性实现 ORM（Object Relational Mapping）、消息转发等。</p>
<h4 id="消息转发">消息转发</h4><p>Objective-C 中的方法调用最终都是执行消息发送，如</p>
<p><code>[receiver message]</code></p>
<p>最后会转换成</p>
<p><code>objc_msgSend(receiver, selector)</code></p>
<p>如果 receiver 不响应 message 消息，则会去父类查找，父类还不响应继续去父类查找，如果一直查找到 NSObject 还不响应，则会进入消息动态处理流程。</p>
<h4 id="消息动态处理">消息动态处理</h4><p>如果一个类不响应某个具体的方法，在进入消息转发流程前还有两个时机处理，第一是询问是否有动态添加方法来进行处理（<code>resolveInstanceMethod/resolveClassMethod</code>）, 若没有则询问有没有别人能够帮忙处理一下啊，调用的是<code>forwardingTargetForSelector</code>这个方法。</p>
<ul>
<li>resolveInstanceMethod / resolveClassMethod</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="tag">BOOL</span>)<span class="tag">resolveInstanceMethod</span><span class="pseudo">:(SEL)sel</span>;</span><br><span class="line">+ (<span class="tag">BOOL</span>)<span class="tag">resolveClassMethod</span><span class="pseudo">:(SEL)sel</span>;</span><br></pre></td></tr></table></figure>
<p>在这个方法中我们可以利用runtime的特性动态添加方法来处理，具体如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.m</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"sel is %@"</span>, <span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">    <span class="keyword">if</span>(sel == <span class="keyword">@selector</span>(setName:))&#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> class], sel, (IMP)a,<span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态处理方法</span></span><br><span class="line"><span class="keyword">void</span> a(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// implementation ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中class_addMethod的四个参数分别是：</p>
<ol>
<li>Class cls 给哪个类添加方法，本例中是self</li>
<li>SEL name 添加的方法，本例中是重写的拦截调用传进来的selector。</li>
<li>IMP imp 方法的实现，C方法的方法实现可以直接获得。如果是OC方法，可以用+ (IMP)instanceMethodForSelector:(SEL)aSelector;获得方法的实现。</li>
<li>“<code>v@:*</code>“方法的签名，代表有一个参数的方法。</li>
</ol>
<ul>
<li>forwardingTargetForSelector</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//A.m</span></span><br><span class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//如果代理对象能处理，则转接给代理对象</span></span><br><span class="line">    B *b = [[B alloc] init];</span><br><span class="line">    <span class="keyword">if</span> ([b <span class="string">respondsToSelector:</span>aSelector]) &#123;</span><br><span class="line">        <span class="keyword">return</span> proxyObj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不能处理进入转发流程</span></span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B.m</span></span><br><span class="line">- (<span class="typename">void</span>)b&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>但是如果<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>也找不到能够帮忙处理这条未知消息，那就会走到最后一步</p>
<ul>
<li>forwardInvocation &amp; methodSignatureForSelector</li>
</ul>
<p>调用<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>，在调用forwardInvocation:之前会调用<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>方法来获取这个选择子的方法签名，然后在<code>-(void)forwardInvocation:(NSInvocation *)anInvocation</code>方法中你就可以通过anInvocation拿到相应信息做处理，实例代码如下</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当A类 收到一条`c`的消息的时候，前两步发现都没办法处理掉，走到第三步：</span></span><br><span class="line"><span class="comment">//A.m</span></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"forwardInvocation: %@"</span>, <span class="built_in">NSStringFromSelector</span>([anInvocation selector]));</span><br><span class="line">    <span class="keyword">if</span> ([anInvocation selector] == <span class="keyword">@selector</span>(c)) &#123;</span><br><span class="line">        C *c = [[C alloc] init];</span><br><span class="line">        [anInvocation invokeWithTarget:c];</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"method signature for selector: %@"</span>, <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="keyword">@selector</span>(c)) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span> signatureWithObjCTypes:<span class="string">"V@:@"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//C.m</span></span><br><span class="line">- (<span class="keyword">void</span>)c&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>消息转发流程如下：</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/8/8/a65b266e187329db430c8120aab53ffc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p>
<p>那么最后消息未能处理的时候，还会调用到<br><code>- (void)doesNotRecognizeSelector:(SEL)aSelector</code>这个方法，我们也可以在这个方法中做些文章，避免掉crash，但是只建议在线上环境的时候做处理，实际开发过程中还要把异常抛出来</p>
<h4 id="isa、Class_和_MetaClass">isa、Class 和 MetaClass</h4><p>Objective-C 是 C 的超集，提供了面向对象的机制，而面向对象思想里有两个重要的概念：类和实例</p>
<p>在 runtime.h 中我们可以看到如下定义：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class isa  OBJC_ISA_<span class="built_in">AVAILABILITY</span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#if !__OBJC2__</span></span><br><span class="line">    Class super_class                                        OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span><br></pre></td></tr></table></figure></p>
<p>isa：是一个Class 类型的指针. 每个实例对象有个isa的指针, 它<code>指向对象的类</code>，而Class里也有个isa的指针, 指向MeteClass(元类)。<br>元类也有isa指针,它的isa指针最终指向的是一个根元类(root meteClass).根元类的isa指针指向本身，这样形成了一个封闭的内循环。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//B.h</span></span><br><span class="line"><span class="variable">@interface</span> <span class="attribute">B</span>: NSObject</span><br><span class="line"></span><br><span class="line">+ (void)classFuncB;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//A.h</span></span><br><span class="line">#import <span class="string">"B.h"</span></span><br><span class="line"><span class="variable">@interface</span> <span class="attribute">A</span>: B</span><br><span class="line"></span><br><span class="line">+ (void)classFuncA;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line">#import <span class="string">"A.m"</span></span><br><span class="line"></span><br><span class="line">A *a = [[A alloc] init];</span><br><span class="line"><span class="comment">//此时a的isa指向类A(Class A)</span></span><br><span class="line"><span class="comment">//类A的isa指向类A的metaClass，类A的metaClass储存着类方法`classFuncA`</span></span><br><span class="line"></span><br><span class="line"><span class="attr_selector">[A classFuncB]</span>;</span><br><span class="line"><span class="comment">//此时类A调用类方法`classFuncB`, 但类A的metaClass找不到`classFuncB`, 则会去A的父类B的metaClass里找到`classFuncB`，</span></span><br></pre></td></tr></table></figure>
<p>继承关系：</p>
<ol>
<li>类继承（Class）：<code>A--&gt;B--&gt;NSObject--&gt;nil</code></li>
<li>元类继承 （MetaClass）：<code>MetaA--&gt;MetaB--&gt;RootMeta--&gt;NSObject(Class)--&gt;nil</code></li>
<li>isa继承：<code>实例a的isa--&gt;类A的isa--&gt;元类A的isa--&gt;RootMeta(根元类)的isa--&gt;RootMeta(根元类)自身的isa</code>, 类B同理。</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/449095-3e972ec16703c54d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240/q/100" alt=""></p>
<ul>
<li><p>每一个对象本质上都是一个类的实例。其中类定义了成员变量和成员方法的列表。对象通过对象的isa指针指向类。</p>
</li>
<li><p>每一个类本质上都是一个对象，类其实是元类（meteClass）的实例。元类定义了类方法的列表。类通过类的isa指针指向元类。</p>
</li>
<li><p>所有的元类最终继承一个根元类，根元类isa指针指向本身，形成一个封闭的内循环。</p>
</li>
</ul>
<p>元类保存了<code>类方法</code>的列表。当类方法被调用时，先会从本身查找类方法的实现，如果没有，元类会向他父类查找该方法。</p>
<h4 id="load与initialize">load与initialize</h4><table>
<thead>
<tr>
<th></th>
<th>+ load</th>
<th>+ initialize</th>
</tr>
</thead>
<tbody>
<tr>
<td>调用时机</td>
<td>被添加到 runtime 时, 通常就是App启动时进行加载</td>
<td>收到第一条消息前(主动使用该类时)，可能永远不调用</td>
</tr>
<tr>
<td>调用顺序</td>
<td>父类-&gt;子类-&gt;分类</td>
<td>父类-&gt;子类</td>
</tr>
<tr>
<td>调用次数</td>
<td>1次</td>
<td>多次</td>
</tr>
<tr>
<td>是否需要显式调用父类实现</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>是否沿用父类的实现</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>分类中的实现</td>
<td>类和分类都执行</td>
<td>覆盖类中的方法，只执行分类的实现</td>
</tr>
<tr>
<td>常见应用</td>
<td>runtime method swizzling</td>
<td>可用来做一些初始化工作，如单例模式。</td>
</tr>
</tbody>
</table>
<h4 id="method_swizzling">method swizzling</h4><p>注意点：</p>
<ul>
<li>需要在<code>+(void)load</code>方法里</li>
<li>使用<code>dispatch_once</code>只交换一次</li>
</ul>
<p>示例：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">swizzling</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//load方法会在类第一次加载的时候被调用</span></span><br><span class="line"><span class="comment">//调用的时间比较靠前，适合在这个方法里做方法交换</span></span><br><span class="line">+ (<span class="keyword">void</span>)load&#123;</span><br><span class="line">    <span class="comment">//方法交换应该被保证，在程序中只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">//获得viewController的生命周期方法的selector</span></span><br><span class="line">        SEL systemSel = <span class="keyword">@selector</span>(viewWillAppear:);</span><br><span class="line">        <span class="comment">//自己实现的将要被交换的方法的selector</span></span><br><span class="line">        SEL swizzSel = <span class="keyword">@selector</span>(swiz_viewWillAppear:);</span><br><span class="line">        <span class="comment">//两个方法的Method</span></span><br><span class="line">        Method systemMethod = class_getInstanceMethod([<span class="keyword">self</span> class], systemSel);</span><br><span class="line">        Method swizzMethod = class_getInstanceMethod([<span class="keyword">self</span> class], swizzSel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先动态添加方法，实现是被交换的方法，返回值表示添加成功还是失败</span></span><br><span class="line">        <span class="built_in">BOOL</span> isAdd = class_addMethod(<span class="keyword">self</span>, systemSel, method_getImplementation(swizzMethod), method_getTypeEncoding(swizzMethod));</span><br><span class="line">        <span class="keyword">if</span> (isAdd) &#123;</span><br><span class="line">            <span class="comment">//如果成功，说明类中不存在这个方法的实现</span></span><br><span class="line">            <span class="comment">//将被交换方法的实现替换到这个并不存在的实现</span></span><br><span class="line">            class_replaceMethod(<span class="keyword">self</span>, swizzSel, method_getImplementation(systemMethod), method_getTypeEncoding(systemMethod));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//否则，交换两个方法的实现</span></span><br><span class="line">            method_exchangeImplementations(systemMethod, swizzMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)swiz_viewWillAppear:(<span class="built_in">BOOL</span>)animated&#123;</span><br><span class="line">    <span class="comment">//这时候调用自己，看起来像是死循环</span></span><br><span class="line">    <span class="comment">//但是其实自己的实现已经被替换了</span></span><br><span class="line">    [<span class="keyword">self</span> swiz_viewWillAppear:animated];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"swizzle"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<h4 id="关联对象AssociatedObject">关联对象AssociatedObject</h4><p>常用于对象动态添加属性</p>
<ul>
<li>用给定的key和policy来为指定对象(object)设置关联对象值(value)</li>
</ul>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">objc_setAssociatedObject</span>(<span class="params">id <span class="keyword">object</span>, <span class="keyword">const</span> <span class="keyword">void</span> *key, id <span class="keyword">value</span>, objc_AssociationPolicy policy</span>)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>根据给定的key从指定对象(object)中获取相对应的关联对象值</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> objc_getAssociatedObject(<span class="keyword">id</span> object, <span class="keyword">const</span> <span class="keyword">void</span> *key)</span><br></pre></td></tr></table></figure>
<ul>
<li>移除指定对象的全部关联对象</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void <span class="function"><span class="title">objc_removeAssociatedObjects</span><span class="params">(id object)</span></span></span><br></pre></td></tr></table></figure>
<p>注意点：</p>
<ul>
<li><code>*key</code>:使用<code>static char kAssociatedObjectKey</code> (&amp;kAssociatedObjectKey) 或者 @selector(associatedObject)／<code>_cmd</code></li>
</ul>
<p>示例: 为UITableView增加一个属性cellHeight</p>
<ul>
<li><code>AssociationPolicy</code>:</li>
</ul>
<p>定义</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">enum &#123;</span><br><span class="line">    OBJC_ASSOCIATION_ASSIGN = <span class="number">0</span>, //给关联对象指定弱引用,相当于@<span class="keyword">property</span><span class="title"></span>(assign)或@<span class="keyword">property</span><span class="title"></span>(unsafe_unretained)</span><br><span class="line">    OBJC_ASSOCIATION_RETAIN_NONATOMIC = <span class="number">1</span>, //给关联对象指定非原子的强引用,相当于@<span class="keyword">property</span><span class="title"></span>(nonatomic,strong)或@<span class="keyword">property</span><span class="title"></span>(nonatomic,retain)</span><br><span class="line">    OBJC_ASSOCIATION_COPY_NONATOMIC = <span class="number">3</span>, //给关联对象指定非原子的copy特性,相当于@<span class="keyword">property</span><span class="title"></span>(nonatomic,copy)</span><br><span class="line">    OBJC_ASSOCIATION_RETAIN = <span class="number">01401</span>, //给关联对象指定原子强引用,相当于@<span class="keyword">property</span><span class="title"></span>(atomic,strong)或@<span class="keyword">property</span><span class="title"></span>(atomic,retain)</span><br><span class="line">    OBJC_ASSOCIATION_COPY = <span class="number">01403</span> //给关联对象指定原子copy特性,相当于@<span class="keyword">property</span><span class="title"></span>(atomic,copy)</span><br><span class="line">&#125;;</span><br><span class="line">typedef uintptr_t objc_AssociationPolicy;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//UITableView+Height.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UITableView</span> (<span class="title">Height</span>)</span></span><br><span class="line"><span class="comment">/** height */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> cellHeight;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//UITableView+Height.m</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"UITableView+HeightManager.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UITableView</span> (<span class="title">Height</span>)</span></span><br><span class="line"></span><br><span class="line">-(<span class="keyword">void</span>)setCellHeight:(<span class="built_in">CGFloat</span>)cellHeight &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(cellHeight), @(cellHeight), OBJC_ASSO<span class="built_in">CIATION_ASSIGN_NONATOMIC</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)cellHeight &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> * number = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="keyword">return</span> number<span class="variable">.floatValue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>_cmd</code>在Objective-C的方法中表示当前方法的selector</p>
</blockquote>
<h4 id="遍历类中的所有成员变量_class_copyIvarList">遍历类中的所有成员变量 class_copyIvarList</h4><p>有时候我们要对一些信息进行归档，如用户信息类UserInfo，这将需要重写initWithCoder和encodeWithCoder方法，并对每个属性进行encode和decode操作。那么问题来了：当属性只有几个的时候可以轻松写完，如果有几十个属性呢？我们可以 用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">        <span class="comment">//获得所传入类的成员变量</span></span><br><span class="line">        Ivar *ivars = class_copyIvarList([<span class="keyword">self</span> class], &amp;outCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</span><br><span class="line">            Ivar ivar = ivars[i];</span><br><span class="line">            <span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">            [<span class="keyword">self</span> setValue:[aDecoder decodeObjectForKey:key] forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">        free(ivars);<span class="comment">//别忘记释放</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount;</span><br><span class="line">    Ivar *ivars = class_copyIvarList([<span class="keyword">self</span> class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</span><br><span class="line">        Ivar ivar = ivars[i];</span><br><span class="line">        <span class="built_in">NSString</span> *key = [<span class="built_in">NSString</span> stringWithUTF8String:ivar_getName(ivar)];</span><br><span class="line">        [aCoder encodeObject:[<span class="keyword">self</span> valueForKey:key] forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">    free(ivars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>同理，字典转模型用的也是这种方法。</p>
</blockquote>
<h4 id="访问苹果私有属性_class_copyPropertyList">访问苹果私有属性 class_copyPropertyList</h4><p>利用runtime获取私有属性名</p>
<p>假设我们有一个需求，想改变输入框中占位文字的颜色，用runtime的这个作用可以让我们很方便的实现：</p>
<p>先将输入框所包含的属性打印出来：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)getProperties &#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">objc_property_t</span> *properties = class_copyPropertyList([UITextField <span class="keyword">class</span>], &amp;count);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">        <span class="comment">// 取出属性</span></span><br><span class="line">        <span class="keyword">objc_property_t</span> property = properties[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印属性名字</span></span><br><span class="line">        NSLog(@<span class="string">"%s   &lt;----&gt;   %s"</span>, property_getName(property), property_getAttributes(property));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以看到这样一个属性：<br><img src="http://static.open-open.com/lib/uploadImg/20161218/20161218094612_594.png" alt=""></p>
<p>顾名思义，这就是占位的Label，我们只要利用KVC就可以将其改成我们想要的样子：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">self</span> <span class="built_in">set</span>Value:[UIColor whiteColor] <span class="keyword">for</span>KeyPath:@<span class="string">"_placeholderLabel.textColor"</span>];</span><br></pre></td></tr></table></figure>
<h4 id="类簇Class_Clusters与runtime">类簇Class Clusters与runtime</h4><p>类簇是抽象工厂模式在iOS下的一种实现，众多常用类，如NSString，NSArray，NSDictionary，NSNumber都运作在这一模式下，它是接口简单性和扩展性的权衡体现，在我们完全不知情的情况下，偷偷隐藏了很多具体的实现类，只暴露出简单的接口。而利用runtime的NSClassFromString可以动态地实现类簇应用。</p>
<h6 id="runtime–NSClassFromString_结合类簇应用示例">runtime–NSClassFromString 结合类簇应用示例</h6><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//要求实现：iOS7显示私有类A的viewA，iOS8-10显示私有类B的viewB，iOS11显示私有类C的viewC</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ClusterView</span> : <span class="title">UIView</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在ClusterView.m里创建3个私有类：ViewA、ViewB、ViewC</span></span><br><span class="line"><span class="comment">//ClustersView.m</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ClusterView</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.常规方法：在ClusterView.m中重写alloc的方法</span></span><br><span class="line">+ (instancetype)alloc&#123;</span><br><span class="line">    <span class="keyword">if</span>([<span class="keyword">self</span> class] == [ClusterView class]) &#123;</span><br><span class="line">        <span class="keyword">float</span> v = [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue];</span><br><span class="line">        <span class="keyword">if</span>(v &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="comment">//iOS7</span></span><br><span class="line">            <span class="keyword">return</span> [ViewA alloc];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v &gt;= <span class="number">8</span> &amp;&amp; v &lt;= <span class="number">10</span> ) &#123;</span><br><span class="line">            <span class="comment">//iOS8-10</span></span><br><span class="line">            <span class="keyword">return</span> [ViewB alloc];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//iOS11</span></span><br><span class="line">            <span class="keyword">return</span> [ViewC alloc];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> alloc];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.利用runtime，重写init方法</span></span><br><span class="line">- (instancetype)init &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">float</span> v = [[[<span class="built_in">UIDevice</span> currentDevice] systemVersion] floatValue];</span><br><span class="line">        <span class="built_in">NSString</span> *className = <span class="string">@"ViewC"</span>;</span><br><span class="line">        <span class="keyword">if</span>(v &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="comment">//iOS7</span></span><br><span class="line">            className = <span class="string">@"ViewA"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v &gt;= <span class="number">8</span> &amp;&amp; v &lt;= <span class="number">10</span> ) &#123;</span><br><span class="line">            <span class="comment">//iOS8-10</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"ViewB"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class class = <span class="built_in">NSClassFromString</span>(className);</span><br><span class="line">        <span class="keyword">self</span> = [[class alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for iOS7</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewA</span> : <span class="title">ClusterView</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewA</span></span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect: (<span class="built_in">CGRect</span>)rect&#123;</span><br><span class="line">    <span class="comment">/* Custom iOS7 drawing code */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for iOS8-10</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewB</span> : <span class="title">ClusterView</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewB</span></span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect: (<span class="built_in">CGRect</span>)rect&#123;</span><br><span class="line">    <span class="comment">/* Custom iOS8-11 drawing code */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for iOS11</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewC</span> : <span class="title">ClusterView</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewC</span></span></span><br><span class="line">- (<span class="keyword">void</span>)drawRect: (<span class="built_in">CGRect</span>)rect&#123;</span><br><span class="line">    <span class="comment">/* Custom iOS11 drawing code */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h6 id="参考资料">参考资料</h6><blockquote>
<p><a href="https://juejin.im/entry/59888a8d6fb9a03c5e4408a3" target="_blank" rel="external">https://juejin.im/entry/59888a8d6fb9a03c5e4408a3</a><br><a href="https://github.com/maligh/ML-Objective-C-Demo/blob/master/MessageForwarding" target="_blank" rel="external">https://github.com/maligh/ML-Objective-C-Demo/blob/master/MessageForwarding</a><br><a href="http://blog.csdn.net/yst19910702/article/details/51443901" target="_blank" rel="external">http://blog.csdn.net/yst19910702/article/details/51443901</a><br><a href="https://www.jianshu.com/p/8036f15c91c6" target="_blank" rel="external">https://www.jianshu.com/p/8036f15c91c6</a><br><a href="http://blog.devzeng.com/blog/ios-class-cluster-design-pattern.html" target="_blank" rel="external">http://blog.devzeng.com/blog/ios-class-cluster-design-pattern.html</a><br><a href="http://www.cocoachina.com/ios/20150104/10826.html" target="_blank" rel="external">http://www.cocoachina.com/ios/20150104/10826.html</a><br><a href="http://nshipster.com/method-swizzling/" target="_blank" rel="external">http://nshipster.com/method-swizzling/</a><br><a href="http://nshipster.com/associated-objects/" target="_blank" rel="external">http://nshipster.com/associated-objects/</a><br><a href="http://blog.devzeng.com/blog/oc-associated-objects.html" target="_blank" rel="external">http://blog.devzeng.com/blog/oc-associated-objects.html</a><br><a href="https://www.jianshu.com/p/872447c6dc3f" target="_blank" rel="external">https://www.jianshu.com/p/872447c6dc3f</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="简介">简介</h4><p>Objective-C 是一门动态语言，它的动态性体现在它将很多编译和链接时做的事推延到运行时处理，而这一机制主要依赖系统提供的 runtime 库。利用 runtime 库，我们能在运行时做很多事，例如 objc_setAssocia]]>
    </summary>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="Runtime" scheme="https://litt1e-p.github.io/tags/Runtime/"/>
    
      <category term="method swizzling" scheme="https://litt1e-p.github.io/tags/method-swizzling/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Singleton 单例]]></title>
    <link href="https://litt1e-p.github.io/2017/03/05/Singleton/"/>
    <id>https://litt1e-p.github.io/2017/03/05/Singleton/</id>
    <published>2017-03-05T12:52:38.000Z</published>
    <updated>2018-03-05T12:57:03.472Z</updated>
    <content type="html"><![CDATA[<h4 id="Objective-C">Objective-C</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Singleton.h</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Singleton</span> : <span class="title">NSObject</span>&lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"></span><br><span class="line">+(instancetype)shared;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Singleton.m</span></span><br><span class="line"><span class="preprocessor">#import <span class="title">"Singleton.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Singleton</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Singleton *_instance = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (instancetype)shared &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken,^&#123;</span><br><span class="line">        _instance = [[<span class="keyword">super</span> allocWithZone:<span class="literal">NULL</span>]init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)allocWithZone:(<span class="keyword">struct</span> _<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    <span class="keyword">return</span> [Singleton shared];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone &#123;</span><br><span class="line">    <span class="keyword">return</span> [Singleton shared];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>记得遵循NSCopying协议</p>
</blockquote>
<h4 id="Swift">Swift</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Can't init is singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">init</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Singleton</span>()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Singleton_宏">Singleton 宏</h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">//for .h</span><br><span class="line"><span class="comment">#define SYNTHESIZE_SINGLETON_FOR_HEADER(classname)\</span></span><br><span class="line">+ (classname *)shared<span class="comment">##classname;</span></span><br><span class="line"></span><br><span class="line">//</span><span class="keyword">for</span> .m</span><br><span class="line"><span class="comment">#define SYNTHESIZE_SINGLETON_FOR_CLASS(classname) \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">static classname *shared<span class="comment">##classname = nil; \</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">+ (classname *)shared<span class="comment">##classname \</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="property">@synchronized</span>(self) <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">if</span> (shared<span class="comment">##classname == nil) \</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line">shared<span class="comment">##classname = [[super allocWithZone:NULL] init]; \</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> shared<span class="comment">##classname; \</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">+ (id)<span class="attribute">allocWithZone</span>:(NSZone *)zone <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> [self shared<span class="comment">##classname];\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br><span class="line">- (id)<span class="attribute">copyWithZone</span>:(NSZone *)zone <span class="string">\</span></span><br><span class="line">&#123; <span class="string">\</span></span><br><span class="line"><span class="keyword">return</span> self; <span class="string">\</span></span><br><span class="line">&#125; <span class="string">\</span></span><br><span class="line"><span class="string">\</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Objective-C">Objective-C</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="Singleton" scheme="https://litt1e-p.github.io/tags/Singleton/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Timer]]></title>
    <link href="https://litt1e-p.github.io/2017/03/04/Timer/"/>
    <id>https://litt1e-p.github.io/2017/03/04/Timer/</id>
    <published>2017-03-04T11:17:57.000Z</published>
    <updated>2018-03-04T11:19:36.812Z</updated>
    <content type="html"><![CDATA[<h2 id="定时器">定时器</h2><h4 id="1-_RunLoop定时器">1. RunLoop定时器</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法 手动加入runloop</span></span><br><span class="line">NSTimer *timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">2.0</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(action) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</span><br><span class="line"></span><br><span class="line">[[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>timer <span class="string">forMode:</span>NSDefaultRunLoopMode];<span class="comment">//默认模式</span></span><br><span class="line">[[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>timer <span class="string">forMode:</span>UITrackingRunLoopMode];<span class="comment">//页面追踪模式</span></span><br><span class="line">[[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>timer <span class="string">forMode:</span>NSRunLoopCommonModes]; <span class="comment">//common模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法 自动加入runloop(NSDefaultRunLoopMode)</span></span><br><span class="line">NSTimer *timer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span><span class="number">2.0</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(<span class="string">action:</span>) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>NO];</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line">[timer invalidate];</span><br></pre></td></tr></table></figure>
<h6 id="特点">特点</h6><ul>
<li>存在延迟</li>
</ul>
<p>不管是一次性的还是周期性的timer的实际触发事件的时间，都会与所加入的RunLoop和RunLoop Mode有关，如果此RunLoop正在执行一个连续性的运算，timer就会被延时出发。重复性的timer遇到这种情况，如果延迟超过了一个周期，则会在延时结束后立刻执行，并按照之前指定的周期继续执行。</p>
<ul>
<li>必须加入Runloop(手动或自动)</li>
</ul>
<h4 id="2-_GCD定时器">2. GCD定时器</h4><ul>
<li>循环timer</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> 1.创建GCD中的定时器</span><br><span class="line"> <span class="doctag">@param</span> DISPATCH_SOURCE_TYPE_TIMER source的类型，表示是定时器</span><br><span class="line"> <span class="doctag">@param</span> 0 描述信息，线程ID</span><br><span class="line"> <span class="doctag">@param</span> 0 更详细的描述信息</span><br><span class="line"> <span class="doctag">@param</span> dispatchQueue 队列，确定GCD定时器中的任务在哪个线程中执行</span><br><span class="line"> */</span></span><br><span class="line">dispatch_source_t timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, <span class="number">0</span>, <span class="number">0</span>, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> 2.设置定时器（起始时间|间隔时间|精准度）</span><br><span class="line"> <span class="doctag">@param</span> timer 定时器对象</span><br><span class="line"> <span class="doctag">@param</span> DISPATCH_TIME_NOW 起始时间，DISPATCH_TIME_NOW 从现在开始计时</span><br><span class="line"> <span class="doctag">@param</span> intervalInSeconds * NSEC_PER_SEC 间隔时间</span><br><span class="line"> <span class="doctag">@param</span> leewayInSeconds * NSEC_PER_SEC 精准度，绝对精准0</span><br><span class="line"> */</span></span><br><span class="line">dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, <span class="number">2.0</span> * NSEC_PER_SEC, <span class="number">0</span> * NSEC_PER_SEC);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.设置定时器执行的任务</span></span><br><span class="line">dispatch_source_set_event_handler(timer, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"------------%@"</span>, [NSThread currentThread]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.启动执行</span></span><br><span class="line">dispatch_resume(timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.暂停</span></span><br><span class="line">dispatch_suspend(timer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.释放</span></span><br><span class="line">dispatch_source_cancel(timer);</span><br></pre></td></tr></table></figure>
<ul>
<li>单次timer</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">dispatch_after</span>(<span class="function">dispatch_time</span>(DISPATCH_TIME_NOW, (int64_t)(<span class="number">2</span> * NSEC_PER_SEC)), <span class="tag">dispatch_get_main_queue</span>(), ^(void)&#123;</span><br><span class="line">    <span class="attr_selector">[self action]</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h6 id="特点-1">特点</h6><p>GCD定时器和NSTimer是不一样的，NSTimer受RunLoop影响，但是GCD的定时器不受影响，因为通过源码可知RunLoop也是基于GCD的实现的，所以GCD定时器有非常高的精度</p>
<h4 id="3-_CADisplayLink">3. CADisplayLink</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CADisplayLink *displayLink = [CADisplayLink <span class="string">displayLinkWithTarget:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(<span class="string">action:</span>)];  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔2帧调用一次</span></span><br><span class="line">displayLink.frameInterval = <span class="number">2</span>;  </span><br><span class="line"></span><br><span class="line">[displayLink <span class="string">addToRunLoop:</span>[NSRunLoop currentRunLoop] <span class="string">forMode:</span>NSDefaultRunLoopMode];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放</span></span><br><span class="line">[displayLink invalidate];</span><br></pre></td></tr></table></figure>
<h6 id="特点-2">特点</h6><ul>
<li>刷新频率固定</li>
</ul>
<p>正常情况iOS设备的屏幕刷新频率是固定60Hz,如果CPU过于繁忙，无法保证屏幕60次/秒的刷新率，就会导致跳过若干次调用回调方法的机会，跳过次数取决CPU的忙碌程度。</p>
<ul>
<li>屏幕刷新时调用</li>
</ul>
<p>CADisplayLink在正常情况下会在每次刷新结束都被调用，精确度相当高。但如果调用的方法比较耗时，超过了屏幕刷新周期，就会导致跳过若干次回调调用机会</p>
<ul>
<li>适合做界面渲染</li>
</ul>
<p>CADisplayLink可以确保系统渲染每一帧的时候我们的方法都被调用，从而保证了动画的流畅性</p>
<hr>
<h6 id="参考资料">参考资料</h6><blockquote>
<p><a href="https://www.jianshu.com/p/21d351116587" target="_blank" rel="external">https://www.jianshu.com/p/21d351116587</a><br><a href="http://www.bijishequ.com/detail/234634" target="_blank" rel="external">http://www.bijishequ.com/detail/234634</a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="定时器">定时器</h2><h4 id="1-_RunLoop定时器">1. RunLoop定时器</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span clas]]>
    </summary>
    
      <category term="RunLoop" scheme="https://litt1e-p.github.io/tags/RunLoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[change statusBar backgroundColor]]></title>
    <link href="https://litt1e-p.github.io/2016/12/03/change-statusBar-backgroundColor/"/>
    <id>https://litt1e-p.github.io/2016/12/03/change-statusBar-backgroundColor/</id>
    <published>2016-12-03T13:31:23.000Z</published>
    <updated>2016-12-03T13:32:25.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//for swift</span></span><br><span class="line"></span><br><span class="line">let statWindow = <span class="built_in">UIApplication</span><span class="variable">.shared</span><span class="variable">.value</span>(forKey:<span class="string">"statusBarWindow"</span>) as! <span class="built_in">UIView</span></span><br><span class="line"></span><br><span class="line">let statusBar = statWindow<span class="variable">.subviews</span>[<span class="number">0</span>] as <span class="built_in">UIView</span></span><br><span class="line"></span><br><span class="line">statusBar<span class="variable">.backgroundColor</span> = <span class="built_in">UIColor</span><span class="variable">.red</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//for Objective-C</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *statusWindow = [[<span class="built_in">UIApplication</span> sharedApplication] valueForKey:<span class="string">@"statusBarWindow"</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *statusBar = statusWindow<span class="variable">.subviews</span><span class="variable">.firstObject</span>;</span><br><span class="line"></span><br><span class="line">statusBar<span class="variable">.backgroundColor</span> = <span class="keyword">self</span><span class="variable">.statusBarBackgroundColor</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[autoLayout for UIScrollView in Xib]]></title>
    <link href="https://litt1e-p.github.io/2016/11/26/autoLayout-for-UIScrollView-in-Xib/"/>
    <id>https://litt1e-p.github.io/2016/11/26/autoLayout-for-UIScrollView-in-Xib/</id>
    <published>2016-11-26T07:31:27.000Z</published>
    <updated>2016-11-26T07:32:46.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Using UIScrollView in Xib or storyBoard is quite normal and frequent, but it is a little complicated by using autoLayout because of the complicated scrollView’s contentSize and contentInsets</p>
</blockquote>
<p>let’s begin</p>
<h4 id="1-0_initial_a_scrollView">1.0 initial a scrollView</h4><ul>
<li>new a project, drag a UIScrollView into Storyboard or Xib and make some constraints:</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1418424-8450a58e55abcf98.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1418424-5881ada668a2f949.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="2-0_add_a_contenView">2.0 add a contenView</h4><ul>
<li>2.1 drag an UIView named: <code>containView</code> into scrollView and add the edge constraints. the contentSize of scrollView depend on this <code>containView</code> </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1418424-21e23d2a8f18d687.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>by the way, Xcode interface builder will show some errors, just ignore them.</p>
<ul>
<li>2.2 add some extral constraints to <code>containView</code>  according to the scroll direction</li>
</ul>
<p>so firstly you should make sure that which scroll direction you want</p>
<p>you should not add the constraints like below shows if horizontal and vertical scroll direction are both wanted:</p>
<ul>
<li><p>2.2.1 add a <code>Horizontally in Container</code> and a <code>Vertically in Container</code> constraints</p>
</li>
<li><p>2.2.2 height or width constraints:</p>
</li>
</ul>
<p>for horizontal scroll direction: add a <code>width</code> constraint for <code>containView</code></p>
<p>for vertical scroll direction: add a <code>height</code> constraint for <code>containView</code></p>
<p>and done! 🎉🎉</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Using UIScrollView in Xib or storyBoard is quite normal and frequent, but it is a little complicated by using autoLayout bec]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cannot convert value of type `SecTrustResultType` to expected argument type `UInt32`]]></title>
    <link href="https://litt1e-p.github.io/2016/11/17/Cannot-convert-value-of-type-SecTrustResultType-to-expected-argument-type-UInt32/"/>
    <id>https://litt1e-p.github.io/2016/11/17/Cannot-convert-value-of-type-SecTrustResultType-to-expected-argument-type-UInt32/</id>
    <published>2016-11-17T14:58:33.000Z</published>
    <updated>2016-11-17T15:00:06.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>Cannot convert value of type ‘SecTrustResultType’ to expected argument type ‘UInt32’</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//error example: </span></span><br><span class="line"><span class="keyword">var</span> result = <span class="type">SecTrustResultType</span>(rawValue: <span class="type">SecTrustResultType</span>.<span class="type">Invalid</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//solution:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="type">SecTrustResultType</span>.<span class="type">Invalid</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// for other enum values</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let unspecified = SecTrustResultType(rawValue: SecTrustResultType.Unspecified)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//let proceed = SecTrustResultType(rawValue: SecTrustResultType.Proceed)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unspecified = <span class="type">SecTrustResultType</span>.<span class="type">Unspecified</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proceed = <span class="type">SecTrustResultType</span>.<span class="type">Proceed</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>Cannot convert value of type ‘SecTrustResultType’ to expected argument type ‘UInt32’</p>
</blockquote>
<figure class="highli]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[build a https server for localhost]]></title>
    <link href="https://litt1e-p.github.io/2016/10/20/build-a-https-server-for-localhost/"/>
    <id>https://litt1e-p.github.io/2016/10/20/build-a-https-server-for-localhost/</id>
    <published>2016-10-20T13:48:08.000Z</published>
    <updated>2016-10-20T14:09:59.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>we need a local https server when https is required in product environment</p>
</blockquote>
<p>let us do it now 🔨</p>
<h3 id="0-_install_openssl_firstly!">0. install openssl firstly!</h3><h3 id="1-prepare_a_CA_request_files">1.prepare a CA request files</h3><h4 id="1-1_generate_a_RSA_server_key">1.1 generate a RSA server key</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server<span class="class">.key</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure>
<h4 id="1-2_generate_a_CA_request_file">1.2 generate a CA request file</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -out server<span class="class">.req</span> -key server<span class="class">.key</span> -subj</span><br><span class="line"> <span class="string">"/C=US/ST=LosAngeles/L=LA/O=Namido/CN=127.0.0.1"</span></span><br></pre></td></tr></table></figure>
<p><code>ps. &#39;-subj&#39; can be ignored and you can type them all in the command tool</code></p>
<p>now notice there are two files(server.key, server.req) in current directory, the <code>.key</code> is server private key and the <code>.req</code> is CA request file.</p>
<p>let us get CA signature with <code>server.req</code> if there is no error occured</p>
<h3 id="2-make_an_our_own_CA">2.make an our own CA</h3><h4 id="2-1_generate_a_RSA_key">2.1 generate a RSA key</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -<span class="keyword">out</span> <span class="keyword">ca</span>.key 2048</span><br></pre></td></tr></table></figure>
<h4 id="2-2_root_signature_for_self">2.2 root signature for self</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days <span class="number">1000</span> -key ca<span class="class">.key</span> -out ca<span class="class">.crt</span> -sha256 -subj </span><br><span class="line"><span class="string">"/C=US/ST=LosAngeles/L=LA/O=Namido/CN=Namido CA"</span></span><br></pre></td></tr></table></figure>
<p>notice: <code>value of CN in -subj is the name of CA</code></p>
<h4 id="2-3_generate_a_server_certificate_with_this_root_signature">2.3 generate a server certificate with this root signature</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> server<span class="class">.req</span> -out server<span class="class">.crt</span> -CAkey ca<span class="class">.key</span> -CA ca<span class="class">.crt</span> -days <span class="number">1000</span> </span><br><span class="line">-sha256 -CAcreateserial -CAserial server.serial</span><br></pre></td></tr></table></figure>
<p>the <code>server.crt</code> file that via our own CA generated will exists in current directory if no error occur. </p>
<h3 id="3-0_finally_process">3.0 finally process</h3><h4 id="3-1_add_them_to_server_configuration">3.1 add them to server configuration</h4><p>copy <code>ca.crt</code>, <code>server.crt</code>, <code>server.key</code> three files to HTTPS server such as Nginx/Apache or other server by using <code>server.crt</code> as server certificate, <code>server.key</code> as server private key, <code>ca.crt</code> as keychain certificate.</p>
<p>for example:</p>
<p>this is a node.js server souce code</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line"></span><br><span class="line">	key: fs.readFileSync(<span class="string">'./keys/server.key'</span>),</span><br><span class="line"></span><br><span class="line">	ca: [fs.readFileSync(<span class="string">'./keys/ca.crt'</span>)],</span><br><span class="line"></span><br><span class="line">	cert: fs.readFileSync(<span class="string">'./keys/server.crt'</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https.createServer(options, app).listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'server is running on port 3000'</span>);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="3-2_make_it_valid">3.2 make it valid</h4><p>copy  <code>ca.crt</code> to your local computer somewhere and double click it and modify <code>always trust</code> in your keychain to make it valid.</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f8mcm69ot9j30n60csq3i.jpg" alt=""></p>
<p>done! 🎉</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>we need a local https server when https is required in product environment</p>
</blockquote>
<p>let us do it now 🔨</p>
<h3 ]]>
    </summary>
    
      <category term="Node.js" scheme="https://litt1e-p.github.io/tags/Node-js/"/>
    
      <category term="RSA" scheme="https://litt1e-p.github.io/tags/RSA/"/>
    
      <category term="https" scheme="https://litt1e-p.github.io/tags/https/"/>
    
      <category term="openssl" scheme="https://litt1e-p.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[solution for `forwardInvocation and NSInvocation are not available to Swift`]]></title>
    <link href="https://litt1e-p.github.io/2016/10/09/solution-for-forwardInvocation-and-NSInvocation-are-not-available-to-Swift/"/>
    <id>https://litt1e-p.github.io/2016/10/09/solution-for-forwardInvocation-and-NSInvocation-are-not-available-to-Swift/</id>
    <published>2016-10-09T13:54:46.000Z</published>
    <updated>2016-10-09T13:57:33.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>forwardInvocation and NSInvocation are not available to Swift</p>
</blockquote>
<p>for instance:</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class MyTimer</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">var</span> timer:NSTimer?</span><br><span class="line">  <span class="keyword">let</span> INTERVAL_SECONDS = <span class="number">1.0</span></span><br><span class="line">  required init() &#123;</span><br><span class="line">    <span class="built_in">self</span><span class="built_in">.</span>timer = nil</span><br><span class="line">    <span class="built_in">self</span><span class="built_in">.</span>timer = NSTimer<span class="built_in">.</span>scheduledTimerWithTimeInterval(INTERVAL_SECONDS, target: <span class="built_in">self</span>, <span class="keyword">select</span><span class="subst">or</span>: <span class="variable">#selector</span>(<span class="built_in">self</span><span class="built_in">.</span>getUpdateds(_:))<span class="string">", userInfo: nil, repeats: true)</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>here are class with init() function,  I setup a timer with a selector named:<code>getUpdateds</code> in <code>init()</code></p>
<p>and selector function looks like this:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dynamic</span> <span class="func"><span class="keyword">func</span> <span class="title">getUpdateds</span><span class="params">(timer: NSTimer!)</span></span> &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you’re sharp you might have noticed the <code>dynamic</code> keyword in the function declaration. If you leave it out you’ll get an error like this:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NSForwarding: warning: object <span class="number">0x7f9662d56f0</span> <span class="keyword">of</span> <span class="type">class</span>  SwiftDemo.MyTimer' <span class="keyword">does</span> <span class="keyword">not</span> implement  methodSignatureForSelector: <span class="comment">-- trouble ahead</span></span><br><span class="line">Unrecognized selector -[SwiftDemo.MyTimer getUpdateds:]</span><br></pre></td></tr></table></figure>
<p>That’s because <code>methodSignatureForSelector</code>: is an Objective-C method. By default, Swift objects don’t have it. Adding <code>dynamic</code> to the function signature makes calls to it get dispatched using the Objective-C runtime which avoids our error.</p>
<p>Another way to fix this error is to tag the class with <code>@objc</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="preprocessor">@objc</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTimer</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Which exposes the class to the Objective-C runtime. Then it’ll effectively insert <code>dynamic</code> if it’s needed. Personally, I’d rather have <code>dynamic</code> near the spot that requires it than labelling the whole class.Hopefully we’ll get something more Swift-y soon.</p>
<p>Though <code>forwardInvocation</code> and <code>NSInvocation</code> are not available to Swift.</p>
<p>But, soft! What light through yonder window breaks!</p>
<p>While <code>forwardInvocation</code>: isn’t available, <code>forwardingTargetForSelector</code>: is available.</p>
<p>Which means the we could see if the selector responds to that, and then does a <code>performSelector:</code></p>
<p>or other any your want:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="func"><span class="keyword">func</span> <span class="title">forwardingTargetForSelector</span><span class="params">(aSelector: Selector)</span></span> -&gt; <span class="type">AnyObject</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> forwardTarget!.respondsToSelector(aSelector) &#123;</span><br><span class="line">        <span class="keyword">return</span> forwardTarget</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, Swift support for <code>forwardInvocation:</code> and <code>NSInvocation</code> would be useful. These things have their uses, and while <code>forwardingTargetForSelector:</code> can take care of some of them, they don’t take care of all of them.</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>forwardInvocation and NSInvocation are not available to Swift</p>
</blockquote>
<p>for instance:</p>
<figure class="highligh]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[system version check and comparison in iOS 10]]></title>
    <link href="https://litt1e-p.github.io/2016/09/25/system-version-check-and-comparison-in-iOS-10/"/>
    <id>https://litt1e-p.github.io/2016/09/25/system-version-check-and-comparison-in-iOS-10/</id>
    <published>2016-09-25T14:58:10.000Z</published>
    <updated>2016-09-25T15:10:30.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>there are kinds of ways to check or compare iOS system version</p>
</blockquote>
<h3 id="1-_NSProcessInfo">1. NSProcessInfo</h3><h4 id="in_Swift">in Swift</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> os = <span class="type">NSProcessInfo</span>().operatingSystemVersion </span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (os.majorVersion, os.minorVersion, os.patchVersion) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">8</span>, <span class="number">0</span>, <span class="number">_</span>):    <span class="built_in">print</span>(<span class="string">"iOS &gt;= 8.0.0, &lt; 8.1.0"</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">8</span>, <span class="number">_</span>, <span class="number">_</span>):    <span class="built_in">print</span>(<span class="string">"iOS &gt;= 8.1.0, &lt; 9.0"</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">9</span>, <span class="number">_</span>, <span class="number">_</span>):    <span class="built_in">print</span>(<span class="string">"iOS &gt;= 9.0.0"</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:    <span class="comment">// this code will have already crashed on iOS 7, so &gt;= iOS 10.0    </span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"iOS &gt;= 10.0.0"</span>)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="in_Objective-C">in Objective-C</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">NSInteger</span> ver = [[[<span class="type">NSProcessInfo</span> alloc] <span class="keyword">init</span>] operatingSystemVersion];</span><br><span class="line"></span><br><span class="line"><span class="type">NSLog</span>(@<span class="string">"majorVer: %zi, minorVer: %zi, patchVer: %zi"</span>, ver.majorVersion, ver.minorVersion, ver.patchVersion);</span><br></pre></td></tr></table></figure>
<p>do checking or comparison any you want</p>
<blockquote>
<p>unfortunately, checking system version via NSProcessInfo is only availuable above iOS 8</p>
</blockquote>
<h3 id="2-_UIDevice_systemVersion">2. UIDevice systemVersion</h3><p>for instance, to check version <code>8.0</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span> <span class="type">UIDevice</span>.currentDevice().systemVersion.compare(<span class="string">"8.0"</span>, options:.<span class="type">NumericSearch</span>) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> .<span class="type">OrderedSame</span>, .<span class="type">OrderedDescending</span>:    </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"iOS &gt;= 8.0"</span>) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> .<span class="type">OrderedAscending</span>:   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"iOS &lt; 8.0"</span>)</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>it works well in earlier than iOS 10 cause UIDevice’s systemVersion can be compared as numberic, but it can not compare version like ‘7.0.2’ and ‘10.0.1’, how to fix it?</p>
<h3 id="3-_compare_on_our_own!">3. compare on our own!</h3><p>here is a category of NSString</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="type">NSComparisonResult</span>)compareVersion:(<span class="type">NSString</span> *)checkingVersion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSString</span> *currentVersion = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">if</span> ([currentVersion isEqualToString:checkingVersion]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NSOrderedSame</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">NSArray</span> *currentArr  = [currentVersion componentsSeparatedByString:@<span class="string">"."</span>];</span><br><span class="line">    <span class="type">NSArray</span> *checkingArr = [checkingVersion componentsSeparatedByString:@<span class="string">"."</span>];</span><br><span class="line">    <span class="type">NSInteger</span> <span class="built_in">count</span>      = ([currentArr <span class="built_in">count</span>] &gt; [checkingArr <span class="built_in">count</span>]) ? [currentArr <span class="built_in">count</span>] : [checkingArr <span class="built_in">count</span>];</span><br><span class="line">    <span class="type">NSComparisonResult</span> res;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="built_in">count</span>; i++) &#123;</span><br><span class="line">        <span class="type">NSString</span> *currentString  = i &lt; [currentArr <span class="built_in">count</span>] ? [currentArr objectAtIndex:i] : @<span class="string">"0"</span>;</span><br><span class="line">        <span class="type">NSString</span> *checkingString = i &lt; [checkingArr <span class="built_in">count</span>] ? [checkingArr objectAtIndex:i] : @<span class="string">"0"</span>;</span><br><span class="line">        <span class="keyword">if</span> ([currentString intValue] &gt; [checkingString intValue]) &#123;</span><br><span class="line">            res = <span class="type">NSOrderedDescending</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([currentString intValue] &lt; [checkingString intValue])&#123;</span><br><span class="line">            res = <span class="type">NSOrderedAscending</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//compare current version simply</span></span><br><span class="line">+ (<span class="type">NSComparisonResult</span>)compareCurrentVersion:(<span class="type">NSString</span> *)checkingVersion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> [[[<span class="type">UIDevice</span> currentDevice] systemVersion] compareVersion:checkingVersion];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>how to use them ?</p>
<ul>
<li>use define macro</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define iOS10_OR_LATER ([<span class="type">NSString</span> compareCurrentVersion:@<span class="string">"10.0"</span>] != <span class="type">NSOrderedAscending</span>)</span><br><span class="line">#define iOS9_OR_LATER ([<span class="type">NSString</span> compareCurrentVersion:@<span class="string">"9.0"</span>] != <span class="type">NSOrderedAscending</span>)</span><br><span class="line">#define iOS8_OR_LATER ([<span class="type">NSString</span> compareCurrentVersion:@<span class="string">"8.0"</span>] != <span class="type">NSOrderedAscending</span>)</span><br><span class="line">#define iOS7_OR_LATER ([<span class="type">NSString</span> compareCurrentVersion:@<span class="string">"7.0"</span>] != <span class="type">NSOrderedAscending</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>app version comparison also works!</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">NSString</span> *currentAppVer = [[[<span class="type">NSBundle</span> mainBundle] infoDictionary] objectForKey:@<span class="string">"CFBundleShortVersionString"</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">NSString</span> *latestAppStoreVer = @<span class="string">"2.3.1"</span>; <span class="comment">//get it from your api server or appstore</span></span><br><span class="line"></span><br><span class="line"><span class="type">BOOL</span> isUpdateNeeded = [currentAppVer compareVersion:latestAppStoreVer] == <span class="type">NSOrderedAscending</span>;</span><br></pre></td></tr></table></figure>
<p>done! 🎉🎉</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>there are kinds of ways to check or compare iOS system version</p>
</blockquote>
<h3 id="1-_NSProcessInfo">1. NSProcessInfo<]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="iOS 10" scheme="https://litt1e-p.github.io/tags/iOS-10/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UITableView cell display animation]]></title>
    <link href="https://litt1e-p.github.io/2016/09/24/UITableView-cell-display-animation/"/>
    <id>https://litt1e-p.github.io/2016/09/24/UITableView-cell-display-animation/</id>
    <published>2016-09-24T13:29:22.000Z</published>
    <updated>2016-09-24T13:37:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="when_will_fire_the_animate_effect?">when will fire the animate effect?</h3><p>there are 2 moments for it as below options:</p>
<ol>
<li><p>in <code>- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath</code></p>
</li>
<li><p>in <code>-(void)viewDidAppear</code></p>
</li>
</ol>
<blockquote>
<p>I prefer to choose the second one cause it will fire the animation on everytime that view come appear</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- (void)viewWillDisappear:(<span class="type">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewWillDisappear:animated];</span><br><span class="line">    _tableView.hidden = <span class="type">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)viewDidAppear:(<span class="type">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidAppear:animated];</span><br><span class="line">    _tableView.hidden = <span class="type">NO</span>;</span><br><span class="line">    [<span class="keyword">self</span> animateCell1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)animateCell1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSArray</span> *array = <span class="keyword">self</span>.tableView.indexPathsForVisibleRows;</span><br><span class="line">    <span class="type">NSIndexPath</span> *firstIndexPath = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.<span class="built_in">count</span>; i++) &#123;</span><br><span class="line">        <span class="type">NSIndexPath</span> *indexPath = array[i];</span><br><span class="line">        <span class="type">UITableViewCell</span> *cell = [<span class="keyword">self</span>.tableView cellForRowAtIndexPath:indexPath];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//set an anchorPoint</span></span><br><span class="line">        cell.layer.anchorPoint = <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">        <span class="comment">//reset cell's origin position</span></span><br><span class="line">        cell.layer.position = <span class="type">CGPointMake</span>(<span class="number">0</span>, cell.layer.position.y);      </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//rotate cell </span></span><br><span class="line">        <span class="keyword">if</span> (firstIndexPath.row &lt; indexPath.row) &#123;</span><br><span class="line">            cell.layer.transform = <span class="type">CATransform3DMakeRotation</span>(<span class="type">M_PI_2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cell.layer.transform = <span class="type">CATransform3DMakeRotation</span>(- <span class="type">M_PI_2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        cell.alpha = <span class="number">0.0</span>;</span><br><span class="line">        </span><br><span class="line">        [<span class="type">UIView</span> animateWithDuration:<span class="number">0.5</span> animations:^&#123;</span><br><span class="line">            cell.layer.transform = <span class="type">CATransform3DIdentity</span>;</span><br><span class="line">            cell.alpha = <span class="number">1.0</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)animateCell2</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSArray</span> *array = <span class="keyword">self</span>.tableView.indexPathsForVisibleRows;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.<span class="built_in">count</span>; i++) &#123;</span><br><span class="line">        <span class="type">NSIndexPath</span> *indexPath = array[i];</span><br><span class="line">        <span class="type">UITableViewCell</span> *cell = [<span class="keyword">self</span>.tableView cellForRowAtIndexPath:indexPath];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// setup CATransform3D</span></span><br><span class="line">        <span class="type">CATransform3D</span> transform;</span><br><span class="line">        transform = <span class="type">CATransform3DMakeRotation</span>( (<span class="number">90.0</span>*<span class="type">M_PI</span>)/<span class="number">180</span>, <span class="number">0.0</span>, <span class="number">0.7</span>, <span class="number">0.4</span>);</span><br><span class="line">        transform.m34 = <span class="number">1.0</span>/ -<span class="number">600</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// setup cell's layer</span></span><br><span class="line">        cell.layer.shadowColor = [[<span class="type">UIColor</span> blackColor]<span class="type">CGColor</span>];</span><br><span class="line">        cell.layer.shadowOffset = <span class="type">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        cell.alpha = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        cell.layer.transform = transform;</span><br><span class="line">        cell.layer.anchorPoint = <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// animation</span></span><br><span class="line">        [<span class="type">UIView</span> beginAnimations:@<span class="string">"transform"</span> context:<span class="type">NULL</span>];</span><br><span class="line">        [<span class="type">UIView</span> setAnimationDuration:<span class="number">0.5</span>];</span><br><span class="line">        cell.layer.transform = <span class="type">CATransform3DIdentity</span>;</span><br><span class="line">        cell.alpha = <span class="number">1</span>;</span><br><span class="line">        cell.layer.shadowOffset = <span class="type">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cell.frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, cell.frame.origin.y, cell.frame.size.width, cell.frame.size.height);</span><br><span class="line">        [<span class="type">UIView</span> commitAnimations];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)animateCell3</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">NSArray</span> *array = _tableView.indexPathsForVisibleRows;</span><br><span class="line">    <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; array.<span class="built_in">count</span>; i++) &#123;</span><br><span class="line">        <span class="type">NSIndexPath</span> *indexPath = array[i];</span><br><span class="line">        <span class="type">UITableViewCell</span> *cell = [_tableView cellForRowAtIndexPath:indexPath];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//setup CATransform3D</span></span><br><span class="line">        <span class="type">CATransform3D</span> transform;</span><br><span class="line">        <span class="comment">//        transform = CATransform3DMakeRotation( (90.0*M_PI)/180, 0.0, 0.7, 0.4);</span></span><br><span class="line">        transform = <span class="type">CATransform3DMakeTranslation</span>( <span class="number">0</span>, <span class="number">150</span> * (i + <span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//        transform.m34 = 1.0/ -600;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// setup cell's layer</span></span><br><span class="line">        cell.layer.shadowColor = [[<span class="type">UIColor</span> blackColor] <span class="type">CGColor</span>];</span><br><span class="line">        cell.layer.shadowOffset = <span class="type">CGSizeMake</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        cell.alpha = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        cell.layer.transform = transform;</span><br><span class="line">        cell.layer.anchorPoint = <span class="type">CGPointMake</span>(<span class="number">0</span>, <span class="number">0.5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// animation</span></span><br><span class="line">        [<span class="type">UIView</span> beginAnimations:@<span class="string">"transform"</span> context:<span class="type">NULL</span>];</span><br><span class="line">        [<span class="type">UIView</span> setAnimationDuration:<span class="number">0.5</span> * (<span class="number">0.2</span> * i + <span class="number">1</span>)];</span><br><span class="line">        cell.layer.transform = <span class="type">CATransform3DIdentity</span>;</span><br><span class="line">        cell.alpha = <span class="number">1</span>;</span><br><span class="line">        cell.layer.shadowOffset = <span class="type">CGSizeMake</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        cell.frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, cell.frame.origin.y, cell.frame.size.width, cell.frame.size.height);</span><br><span class="line">        [<span class="type">UIView</span> commitAnimations];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="when_will_fire_the_animate_effect?">when will fire the animate effect?</h3><p>there are 2 moments for it as below options:</p>
<ol>
]]>
    </summary>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="UITableView" scheme="https://litt1e-p.github.io/tags/UITableView/"/>
    
      <category term="animation" scheme="https://litt1e-p.github.io/tags/animation/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[weakify & strongify]]></title>
    <link href="https://litt1e-p.github.io/2016/09/19/weakify-strongify/"/>
    <id>https://litt1e-p.github.io/2016/09/19/weakify-strongify/</id>
    <published>2016-09-19T12:27:28.000Z</published>
    <updated>2016-09-19T12:32:58.000Z</updated>
    <content type="html"><![CDATA[<p>here are two kinds of weakify and strongify solutions for preventing memory leak in ARC.</p>
<p>firstly is a chinese iOS developer with his great job which is named <code>YYKit</code></p>
<h4 id="YYKit">YYKit</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#ifndef weakify</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line"></span><br><span class="line">        #<span class="keyword">if</span> __has_feature(objc_arc)</span><br><span class="line"></span><br><span class="line">        #define weakify(object) autoreleasepool&#123;&#125; __weak __typeof__(object) <span class="keyword">weak</span>##<span class="number">_</span>##object = object;</span><br><span class="line"></span><br><span class="line">        #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #define weakify(object) autoreleasepool&#123;&#125; __block __typeof__(object) block##<span class="number">_</span>##object = object;</span><br><span class="line"></span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #<span class="keyword">if</span> __has_feature(objc_arc)</span><br><span class="line"></span><br><span class="line">        #define weakify(object) <span class="keyword">try</span>&#123;&#125; @finally&#123;&#125; &#123;&#125; __weak __typeof__(object) <span class="keyword">weak</span>##<span class="number">_</span>##object = object;</span><br><span class="line"></span><br><span class="line">        #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #define weakify(object) <span class="keyword">try</span>&#123;&#125; @finally&#123;&#125; &#123;&#125; __block __typeof__(object) block##<span class="number">_</span>##object = object;</span><br><span class="line"></span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef strongify</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">if</span> <span class="type">DEBUG</span></span><br><span class="line"></span><br><span class="line">        #<span class="keyword">if</span> __has_feature(objc_arc)</span><br><span class="line"></span><br><span class="line">        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = <span class="keyword">weak</span>##<span class="number">_</span>##object;</span><br><span class="line"></span><br><span class="line">        #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #define strongify(object) autoreleasepool&#123;&#125; __typeof__(object) object = block##<span class="number">_</span>##object;</span><br><span class="line"></span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">    #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #<span class="keyword">if</span> __has_feature(objc_arc)</span><br><span class="line"></span><br><span class="line">        #define strongify(object) <span class="keyword">try</span>&#123;&#125; @finally&#123;&#125; __typeof__(object) object = <span class="keyword">weak</span>##<span class="number">_</span>##object;</span><br><span class="line"></span><br><span class="line">        #<span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        #define strongify(object) <span class="keyword">try</span>&#123;&#125; @finally&#123;&#125; __typeof__(object) object = block##<span class="number">_</span>##object;</span><br><span class="line"></span><br><span class="line">        #endif</span><br><span class="line"></span><br><span class="line">    #endif</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>secondly, the famous lib : <code>libextobjc</code></p>
<h4 id="libextobjc">libextobjc</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define weakify(...) \\</span><br><span class="line"></span><br><span class="line">    autoreleasepool &#123;&#125; \\</span><br><span class="line"></span><br><span class="line">    metamacro_foreach_cxt(rac_weakify_,, __weak, __VA_ARGS__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define strongify(...) \\</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;&#125; @finally &#123;&#125; \\</span><br><span class="line"></span><br><span class="line">    _Pragma(<span class="string">"clang diagnostic push"</span>) \\</span><br><span class="line"></span><br><span class="line">    _Pragma(<span class="string">"clang diagnostic ignored \\"</span>-<span class="type">Wshadow</span>\\<span class="string">""</span>) \\</span><br><span class="line"></span><br><span class="line">    metamacro_foreach(rac_strongify_,, __VA_ARGS__) \\</span><br><span class="line"></span><br><span class="line">    _Pragma(<span class="string">"clang diagnostic pop"</span>)</span><br></pre></td></tr></table></figure>
<p>all of them can be used in friendly and simply way, enjoy them! 🎉</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"></span><br><span class="line"> Example:</span><br><span class="line"></span><br><span class="line">    @weakify(self)</span><br><span class="line"></span><br><span class="line">    [self doSomething^&#123;</span><br><span class="line"></span><br><span class="line">        @strongify(self)</span><br><span class="line"></span><br><span class="line">        if (!self) return;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>here are two kinds of weakify and strongify solutions for preventing memory leak in ARC.</p>
<p>firstly is a chinese iOS developer with h]]>
    </summary>
    
      <category term="ARC" scheme="https://litt1e-p.github.io/tags/ARC/"/>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
      <category term="strongify" scheme="https://litt1e-p.github.io/tags/strongify/"/>
    
      <category term="weakify" scheme="https://litt1e-p.github.io/tags/weakify/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Collection <CALayerArray: 0xxxxxxxxx> was mutated while being enumerated]]></title>
    <link href="https://litt1e-p.github.io/2016/09/07/Collection-CALayerArray-0xxxxxxxxx-was-mutated-while-being-enumerated/"/>
    <id>https://litt1e-p.github.io/2016/09/07/Collection-CALayerArray-0xxxxxxxxx-was-mutated-while-being-enumerated/</id>
    <published>2016-09-07T12:43:46.000Z</published>
    <updated>2016-09-07T12:59:18.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><strong><em> Collection <calayerarray: 0xxxxxxxxx=""> was mutated while being enumerated</calayerarray:></em></strong></p>
</blockquote>
<p>an error occured when I trying to remove a gradient layer from CALayer.sublayers:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">CALayer</span> *layer <span class="keyword">in</span> cell.imageView.layer.sublayers) &#123;</span><br><span class="line">    <span class="keyword">if</span> ([layer.name isEqualToString:@<span class="string">"Gradient"</span>]) &#123;</span><br><span class="line">        [layer removeFromSuperlayer];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The exception is thrown because changing the contents of the sublayers array while enumerating it with foreach loop. This is not something special to layers, a similar exception is thrown when you add/remove objects while enumerating any NSMutableArray.</p>
<p>we have various options to solve this issue</p>
<h4 id="Solution_1:_Stop_enumerating_as_soon_as_you_modify_the_array-">Solution 1: Stop enumerating as soon as you modify the array.</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">CALayer</span> *layer <span class="keyword">in</span> yourView.layer.sublayers) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([layer.name isEqualToString:@<span class="string">"Gradient"</span>]) &#123;</span><br><span class="line"></span><br><span class="line">        [layer removeFromSuperlayer];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Solution_2:_Do_not_enumerate_the_real_array,_instead_use_its_copy-">Solution 2: Do not enumerate the real array, instead use its copy.</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">NSArray</span>* sublayers = [<span class="type">NSArray</span> arrayWithArray:yourView.layer.sublayers];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">CALayer</span> *layer <span class="keyword">in</span> sublayers) &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ([layer.name isEqualToString:@<span class="string">"Gradient"</span>]) &#123;</span><br><span class="line"></span><br><span class="line">        [layer removeFromSuperlayer];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Solution_3:_Use_key_value_coding_to_keep_a_reference_to_the_gradient_layer-">Solution 3: Use key value coding to keep a reference to the gradient layer.</h4><p>Set it after inserting:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[yourView.layer insertSublayer:layer atIndex:<span class="number">0</span>]; </span><br><span class="line"></span><br><span class="line">[yourView.layer setValue:layer forKey:@<span class="string">"GradientLayer"</span>];</span><br></pre></td></tr></table></figure>
<p>Retrieve and remove it</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">CALayer</span>* layer = [yourView.layer valueForKey:@<span class="string">"GradientLayer"</span>];</span><br><span class="line"></span><br><span class="line"> [layer removeFromSuperlayer]; </span><br><span class="line"></span><br><span class="line">[yourView.layer setValue:<span class="literal">nil</span> forKey:@<span class="string">"GradientLayer"</span>];</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><strong><em> Collection <calayerarray: 0xxxxxxxxx=""> was mutated while being enumerated</calayerarray:></em></strong></p>
<]]>
    </summary>
    
      <category term="Note" scheme="https://litt1e-p.github.io/tags/Note/"/>
    
      <category term="Objective-C" scheme="https://litt1e-p.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Compiler error: Method with Objective-C selector conflicts with previous declaration with the same Objective-C selector]]></title>
    <link href="https://litt1e-p.github.io/2016/08/15/Compiler-error-Method-with-Objective-C-selector-conflicts-with-previous-declaration-with-the-same-Objective-C-selector/"/>
    <id>https://litt1e-p.github.io/2016/08/15/Compiler-error-Method-with-Objective-C-selector-conflicts-with-previous-declaration-with-the-same-Objective-C-selector/</id>
    <published>2016-08-15T13:08:34.000Z</published>
    <updated>2016-08-15T13:10:44.000Z</updated>
    <content type="html"><![CDATA[<p>The code which creates the error is:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BugView</span>: <span class="title">UIView</span></span><br><span class="line"></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">resignFirstResponder</span><span class="params">()</span></span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This creates the following compiler error:</p>
<blockquote>
<p>Method ‘resignFirstResponder()’ with Objective-C selector ‘resignFirstResponder’ conflicts with method ‘resignFirstResponder()’ from superclass ‘UIResponder’ with the same Objective-C selector</p>
</blockquote>
<p>By simply removing the sub-classing of UIViewController the code compiles successfully:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BugView</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">resignFirstResponder</span><span class="params">()</span></span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Why?">Why?</h4><p>The reason is that Objective-C does not support method overloading, you have to use a different method name. When you inherited UIViewController you inherited NSObject and made the class interopable to Obj-C. Swift on the other hand does support overloading, that’s why it works when you remove the inheritance.</p>
<p>As we all knowed, ObjC doesn’t support method overloading (two methods with the same name) and In swift 2 under Xcode 7 there are two options to solve this kind of problems. </p>
<p>One option is to rename the method using the attribute: @objc(newNameMethod:)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">methodOne</span><span class="params">(par1, par2)</span></span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">@objc</span>(methodTwo:)</span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">methodOne</span><span class="params">(par1)</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>another option to solve this kind of problems in Xcode7 is by applying @nonobjc attribute to any method, subscript or initialiser</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">methodOne</span><span class="params">()</span></span> &#123;...&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">@nonobjc</span> </span><br><span class="line"></span><br><span class="line"><span class="func"><span class="keyword">func</span> <span class="title">methodOne</span><span class="params">()</span></span> &#123;...&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>The code which creates the error is:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><b]]>
    </summary>
    
      <category term="nonobjc" scheme="https://litt1e-p.github.io/tags/nonobjc/"/>
    
      <category term="objc" scheme="https://litt1e-p.github.io/tags/objc/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Macro #define in swift]]></title>
    <link href="https://litt1e-p.github.io/2016/08/12/Macro-define-in-swift/"/>
    <id>https://litt1e-p.github.io/2016/08/12/Macro-define-in-swift/</id>
    <published>2016-08-12T15:18:39.000Z</published>
    <updated>2016-08-12T15:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>define a rgba color macro, for instance.</p>
<p>in Objective-C</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define <span class="type">RGBA</span>(r,g,b,a) [<span class="type">UIColor</span> colorWithRed:(float)r/<span class="number">255</span>.0f green:(float)g/<span class="number">255</span>.0f blue:(float)b/<span class="number">255</span>.0f alpha:a]</span><br></pre></td></tr></table></figure>
<p>in Swift: <code>define a closure macro</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="type">RGBA</span>: (<span class="type">CGFloat</span>, <span class="type">CGFloat</span>, <span class="type">CGFloat</span>, <span class="type">CGFloat</span>) -&gt; <span class="type">UIColor</span> = &#123;</span><br><span class="line">    (r: <span class="type">CGFloat</span>, g: <span class="type">CGFloat</span>, b: <span class="type">CGFloat</span>, a: <span class="type">CGFloat</span>) -&gt; <span class="type">UIColor</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">UIColor</span>(red: r/<span class="number">255.0</span>, green: g/<span class="number">255.0</span>, blue: b/<span class="number">255.0</span>, alpha: a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Usage">Usage</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">RGBA</span>(<span class="number">101</span>, <span class="number">101</span>, <span class="number">101</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>define a rgba color macro, for instance.</p>
<p>in Objective-C</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><sp]]>
    </summary>
    
      <category term="macro" scheme="https://litt1e-p.github.io/tags/macro/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Change UIStatusBar backgroundColor]]></title>
    <link href="https://litt1e-p.github.io/2016/08/07/Change-UIStatusBar-backgroundColor/"/>
    <id>https://litt1e-p.github.io/2016/08/07/Change-UIStatusBar-backgroundColor/</id>
    <published>2016-08-07T14:40:06.000Z</published>
    <updated>2016-08-07T14:51:33.000Z</updated>
    <content type="html"><![CDATA[<p>how to change the color of UIStatusBar? there are two solutions to it</p>
<h4 id="Solution_1">Solution 1</h4><p>just set a backgroundImage for navigationBar which size’s height is 64.0, because the image will overlay the statusBar</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">navigationController!.navigationBar.setBackgroundImage(<span class="type">UIImage</span>.imageWithColor(yourColor, size: <span class="type">CGSizeMake</span>(</span><br><span class="line"><span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">, <span class="number">64</span>)), forBarPosition: <span class="type">UIBarPosition</span>.<span class="type">Any</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)</span><br></pre></td></tr></table></figure>
<p>if your don’t want to set navigationBar’s backgroundImage with height 64, such as you just set it to 44, you can try it out with solution 2 below.</p>
<h4 id="Solution_2">Solution 2</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//set navigationBar's backgroundImage with height 44</span></span><br><span class="line"></span><br><span class="line">navigationController!.navigationBar.setBackgroundImage(<span class="type">UIImage</span>.imageWithColor(yourColor, size: <span class="type">CGSizeMake</span>(</span><br><span class="line"><span class="type">UIScreen</span>.mainScreen().bounds.size.width</span><br><span class="line">, <span class="number">44</span>)), forBarPosition: <span class="type">UIBarPosition</span>.<span class="type">Any</span>, barMetrics: <span class="type">UIBarMetrics</span>.<span class="type">Default</span>)</span><br></pre></td></tr></table></figure>
<p><code>tricky time</code></p>
<p>use <a href="https://github.com/litt1e-p/LPStatusBarBackgroundColor-swift" target="_blank" rel="external">LPStatusBarBackgroundColor-swift</a> or <a href="https://github.com/litt1e-p/LPStatusBarBackgroundColor" target="_blank" rel="external">LPStatusBarBackgroundColor</a> and they are quite simple</p>
<p>let’s take LPStatusBarBackgroundColor-swift for example:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> LPStatusBarBackgroundColor_swift</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** in navigationController */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationBar.statusBarBackgroundColor = <span class="type">UIColor</span>.blackColor() <span class="comment">//any color you want</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** in navigationController's rootViewController */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.navigationController?.navigationBar.statusBarBackgroundColor = <span class="type">UIColor</span>.brownColor <span class="comment">//any color you want</span></span><br></pre></td></tr></table></figure>
<p>the end it works well now!</p>
<p><img src="https://raw.githubusercontent.com/litt1e-p/LPStatusBarBackgroundColor-swift/master/screenshot.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>how to change the color of UIStatusBar? there are two solutions to it</p>
<h4 id="Solution_1">Solution 1</h4><p>just set a backgroundImag]]>
    </summary>
    
      <category term="UIStatusBar" scheme="https://litt1e-p.github.io/tags/UIStatusBar/"/>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reduce animated effect of UICollectionView while reloading section]]></title>
    <link href="https://litt1e-p.github.io/2016/07/27/Reduce-animated-effect-of-UICollectionView-while-reloading-section/"/>
    <id>https://litt1e-p.github.io/2016/07/27/Reduce-animated-effect-of-UICollectionView-while-reloading-section/</id>
    <published>2016-07-27T15:06:06.000Z</published>
    <updated>2016-07-27T15:19:50.000Z</updated>
    <content type="html"><![CDATA[<p>the animated effect is quite werid while reloading UICollectionView’s section which is base on our custom flowLayout, to reduce or avoid that, here is a solution to it. </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.0</span>, animations: &#123;</span><br><span class="line"></span><br><span class="line">     [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">self</span>!.collectionView.performBatchUpdates(&#123; </span><br><span class="line"></span><br><span class="line">           <span class="keyword">self</span>?.collectionView.reloadSections(<span class="type">NSIndexSet</span>(index: yourIndex))</span><br><span class="line"></span><br><span class="line">      &#125;, completion: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>its animation duration sets to <code>0.0</code> so that it can reduces or avoids the bug happening. </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>the animated effect is quite werid while reloading UICollectionView’s section which is base on our custom flowLayout, to reduce or avoid ]]>
    </summary>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Customation appearance for UIAlertController & UIAlertAction with KVC]]></title>
    <link href="https://litt1e-p.github.io/2016/07/18/Customation-appearance-for-UIAlertController-UIAlertAction-with-KVC/"/>
    <id>https://litt1e-p.github.io/2016/07/18/Customation-appearance-for-UIAlertController-UIAlertAction-with-KVC/</id>
    <published>2016-07-18T13:41:24.000Z</published>
    <updated>2016-07-18T13:42:28.000Z</updated>
    <content type="html"><![CDATA[<ol>
<li>for UIAlertController</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIAlertController</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">customAppearance</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//custom title or message with attributedString and its attributes(fontName\foregroundColor with different range) </span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> titleStr = title &#123;</span><br><span class="line">            <span class="keyword">let</span> range = <span class="type">NSMakeRange</span>(<span class="number">0</span>, titleStr.characters.<span class="built_in">count</span>)</span><br><span class="line">            <span class="keyword">let</span> attrTitle = <span class="type">NSMutableAttributedString</span>(string: titleStr)</span><br><span class="line">            attrTitle.addAttribute(<span class="type">NSFontAttributeName</span>, value: <span class="type">UIFont</span>(name: yourFontName, size: <span class="number">20.0</span>)!, range: range)</span><br><span class="line">            attrTitle.addAttribute(<span class="type">NSForegroundColorAttributeName</span>, value: yourCustomColor, range: range)</span><br><span class="line">            setValue(attrTitle, forKey: <span class="string">"attributedTitle"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> msgStr = message &#123;</span><br><span class="line">            <span class="keyword">let</span> range = <span class="type">NSMakeRange</span>(<span class="number">0</span>, msgStr.characters.<span class="built_in">count</span>)</span><br><span class="line">            <span class="keyword">let</span> attrMsg = <span class="type">NSMutableAttributedString</span>(string: msgStr)</span><br><span class="line">            attrMsg.addAttribute(<span class="type">NSFontAttributeName</span>, value: <span class="type">UIFont</span>(name: yourFontName, size: <span class="number">14.0</span>)!, range: range)</span><br><span class="line">            attrMsg.addAttribute(<span class="type">NSForegroundColorAttributeName</span>, value: yourCustomColor, range: range)</span><br><span class="line">            setValue(attrMsg, forKey: <span class="string">"attributedMessage"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>for UIAlertAction<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIAlertAction</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">customAppearance</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> style == .<span class="type">Cancel</span> &amp;&amp; title?.characters.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">//custom titleTextColor</span></span><br><span class="line">            setValue(yourCustomColor, forKey: <span class="string">"titleTextColor"</span>)</span><br><span class="line">            <span class="comment">//custom left image</span></span><br><span class="line">            <span class="keyword">let</span> img = <span class="type">UIImage</span>(named: <span class="string">"yourImageFileName"</span>)?.imageWithRenderingMode(.<span class="type">AlwaysOriginal</span>)</span><br><span class="line">            setValue(img, forKey: <span class="string">"image"</span>)</span><br><span class="line">            <span class="comment">//custom titleTextAlignment with NSTextAlignment.enum rawValue(Int: 64-bit integer)</span></span><br><span class="line">            setValue(<span class="type">NSNumber</span>(integer: <span class="type">NSTextAlignment</span>.<span class="type">Left</span>.rawValue), forKey: <span class="string">"titleTextAlignment"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//so By that analogy, custom the other styles as your want   </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> style == .<span class="type">Default</span> &amp;&amp; title?.characters.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            setValue(yourCustomColor, forKey: <span class="string">"titleTextColor"</span>)</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> style == .<span class="type">Destructive</span> &amp;&amp; title?.characters.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line">            setValue(yourCustomColor, forKey: <span class="string">"titleTextColor"</span>)</span><br><span class="line">            <span class="comment">//......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<ol>
<li>for UIAlertController</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Definition of Deprecated & Unavailable]]></title>
    <link href="https://litt1e-p.github.io/2016/07/07/Definition-of-Deprecated-Unavailable/"/>
    <id>https://litt1e-p.github.io/2016/07/07/Definition-of-Deprecated-Unavailable/</id>
    <published>2016-07-07T12:14:06.000Z</published>
    <updated>2016-07-07T12:21:32.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>1 <code>mark for unavailable function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">__attribute__((unavailable(<span class="string">"It is not available, Use other function instead"</span>)));</span><br></pre></td></tr></table></figure>
<h3 id="Notice">Notice</h3><p><code>__attribute__((unavailable(...) can not pass Xcode buid</code></p>
<ul>
<li>2 <code>mark for deprecated function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">NS_DEPRECATED_IOS</span>(<span class="number">2_0</span>, <span class="number">6_0</span>, <span class="string">"Use other function instead"</span>)</span><br><span class="line"><span class="comment">//2_0 &amp; 6_0 means that the function can only run on iOS2~6.0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>if you want get more infomation for deprecated definitions, check Apple’s official documents</p>
</blockquote>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#define <span class="type">NS_DEPRECATED</span>(_macIntro, _macDep, _iosIntro, _iosDep, ...) <span class="type">CF_DEPRECATED</span>(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)</span><br><span class="line">#define <span class="type">NS_DEPRECATED_MAC</span>(_macIntro, _macDep, ...) <span class="type">CF_DEPRECATED_MAC</span>(_macIntro, _macDep, __VA_ARGS__)</span><br><span class="line">#define <span class="type">NS_DEPRECATED_IOS</span>(_iosIntro, _iosDep, ...) <span class="type">CF_DEPRECATED_IOS</span>(_iosIntro, _iosDep, __VA_ARGS__)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>1 <code>mark for unavailable function</code></li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span cl]]>
    </summary>
    
      <category term="swift" scheme="https://litt1e-p.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[UIRefreshControl Trigger]]></title>
    <link href="https://litt1e-p.github.io/2016/07/04/UIRefreshControl-Trigger/"/>
    <id>https://litt1e-p.github.io/2016/07/04/UIRefreshControl-Trigger/</id>
    <published>2016-07-04T13:22:46.000Z</published>
    <updated>2016-07-07T12:19:14.000Z</updated>
    <content type="html"><![CDATA[<p>Sometimes we want to trigger the UIRefreshControl auto beginRefreshing with scrollView or its subView pulling down effects.</p>
<p>here it is a extension for it</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIRefreshControl</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="func"><span class="keyword">func</span> <span class="title">triggerRefresh</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scrollView = superview <span class="keyword">as</span>? <span class="type">UIScrollView</span> &#123;</span><br><span class="line">            scrollView.setContentOffset(<span class="type">CGPoint</span>(x: <span class="number">0</span>, y: scrollView.contentOffset.y - frame.height), animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        beginRefreshing()</span><br><span class="line">        <span class="keyword">self</span>.sendActionsForControlEvents(<span class="type">UIControlEvents</span>.<span class="type">ValueChanged</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Usage">Usage</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tableView.triggerRefresh()</span><br><span class="line"></span><br><span class="line">collectionView.triggerRefresh()</span><br><span class="line"></span><br><span class="line">scrollView.triggerRefresh()</span><br></pre></td></tr></table></figure>
<h3 id="done_🎉🎉">done 🎉🎉</h3>]]></content>
    <summary type="html">
    <![CDATA[<p>Sometimes we want to trigger the UIRefreshControl auto beginRefreshing with scrollView or its subView pulling down effects.</p>
<p>here i]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Selector in Swift]]></title>
    <link href="https://litt1e-p.github.io/2016/06/24/Selector-in-Swift/"/>
    <id>https://litt1e-p.github.io/2016/06/24/Selector-in-Swift/</id>
    <published>2016-06-24T15:47:13.000Z</published>
    <updated>2016-06-24T15:52:46.000Z</updated>
    <content type="html"><![CDATA[<p>#selector in Swift.md</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// func</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">optional</span> <span class="keyword">public</span> <span class="func"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAtIndexPath indexPath: NSIndexPath)</span></span> -&gt; <span class="type">CGSize</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// selector</span></span><br><span class="line"></span><br><span class="line">#selector(<span class="type">UICollectionViewDelegateFlowLayout</span>.collectionView(<span class="number">_</span>:layout:sizeForItemAtIndexPath:))</span><br><span class="line"></span><br><span class="line"><span class="comment">// in a word</span></span><br><span class="line"></span><br><span class="line">#selector((className or protocolName).<span class="type">MethodName</span>(<span class="type">ParamA</span>:<span class="type">ParamB</span>:...))</span><br></pre></td></tr></table></figure>
<h4 id="Notice">Notice</h4><p>if func does not have params</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#selector((className or protocolName).<span class="type">MethodName</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>#selector in Swift.md</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="]]>
    </summary>
    
  </entry>
  
</feed>
